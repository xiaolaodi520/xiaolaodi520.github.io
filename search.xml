<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo一些基本命令</title>
      <link href="2021/10/06/hexo%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>2021/10/06/hexo%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>首先Ctrl+C停止当前的本地服务，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot;</span><br></pre></td></tr></table></figure><p>这样便产生了一篇文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章需要使用Markdown语法进行编写</span><br></pre></td></tr></table></figure><p>hexo g #完整命令为hexo generate,用于生成静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d #完整命令为hexo deploy,用于将本地文件发布到github等git仓库上</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;my article&quot; #完整命令为hexo new,用于新建一篇名为“my article”的文章</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="2021/10/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2021/10/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>助手函数</title>
      <link href="2021/04/11/%E5%8A%A9%E6%89%8B%E5%87%BD%E6%95%B0/"/>
      <url>2021/04/11/%E5%8A%A9%E6%89%8B%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>str.find();<br>str.substr();<br>str.length();</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU15</title>
      <link href="2021/03/11/BUU15/"/>
      <url>2021/03/11/BUU15/</url>
      
        <content type="html"><![CDATA[<h1 id="RCTF2019-disk"><a href="#RCTF2019-disk" class="headerlink" title="[RCTF2019]disk"></a><strong>[RCTF2019]disk</strong></h1><p>题目设定：</p><blockquote><p>  An otaku used VeraCrypt to encrypt his favorites.<br>    Password: rctf<br>    Flag format: rctf{a-zA-Z0-9_}<br>首先下载题目附件，得到rctf-disk.zip，解压得到encrypt.vmdk。<br>因为无法确定vmdk是VeraCrypt加密完的虚拟硬盘文件随便改了个格式，<br>还是存储了VeraCrypt加密后虚拟磁盘文件的虚拟磁盘，因此先尝试使用7zip打开该文件。<br><img src="/2021/03/11/BUU15/1.png"><br>说明外层的vmdk只是容器，并没有加密。将0.fat解压出来，再次尝试用7zip打开，报错，说明vmdk中包含的这个FAT32分区被加密了。使用WinHex载入这个文件可以看到：<br><img src="/2021/03/11/BUU15/2.png"><br>这样我们就得到了前半段Flag，为： <code>rctf&#123;unseCure_quick_form4t_vo1ume</code><br>使用题目中所给的VeraCrypt密码对0.fat文件进行解密并加载，发现加载成功，为常规卷，加密类型为AES。<br><img src="/2021/03/11/BUU15/6.png"><br>注意左侧文件的文件名70056639_useless_file_for_ctf_just_ignore_it.jpg，说明其不包含解题的有效信息。于是打开password.txt，文件内容为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Password 2: RCTF2019</span><br><span class="line">You&#39;re late... So sad</span><br></pre></td></tr></table></figure><p><img src="/2021/03/11/BUU15/3.png"><br>将此加密盘卸载，使用得到的第二个密码再次加载，加载成功。加密方式是AES，但是注意该分区是隐藏分区。<br><img src="/2021/03/11/BUU15/4.png"><br>由于是隐藏分区所以无法直接访问。因此使用WinHex载入磁盘，提示无法自动检测分区格式后选择“分区无格式”，并查看该分区扇区数据（DiskGenius查看磁盘扇区数据也可以）。<br><img src="/2021/03/11/BUU15/5.png"><br>得到后半段Flag：<code>_and_corrupted__1nner_v0lume&#125;</code><br>拼接后得到完整的Flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rctf&#123;unseCure_quick_form4t_vo1ume_and_corrupted_1nner_v0lume&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="watevrCTF-2019-Evil-Cuteness"><a href="#watevrCTF-2019-Evil-Cuteness" class="headerlink" title="[watevrCTF 2019]Evil Cuteness"></a><strong>[watevrCTF 2019]Evil Cuteness</strong></h1><p>binwalk分离打开出来的abc<br>得到flag<br><img src="/2021/03/11/BUU15/7.png"></p><hr><hr><hr><h1 id="取证-HDCTF2019-你能发现什么蛛丝马迹吗"><a href="#取证-HDCTF2019-你能发现什么蛛丝马迹吗" class="headerlink" title="取证 [HDCTF2019]你能发现什么蛛丝马迹吗"></a><strong>取证 [HDCTF2019]你能发现什么蛛丝马迹吗</strong></h1><p>打开文件<br>flag白给</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Challenge description:</span><br><span class="line"></span><br><span class="line">I really hope you are INSAne, but if that&#39;s not the case and that you don&#39;t want to validate the &quot;INSAnity&quot; challenge then maybe you would like to validate this one? Here is your flag, you disapointing and boring fellow: INSA&#123;Youre_sane_Good_for_you&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Youre_sane_Good_for_you&#125;</span><br></pre></td></tr></table></figure><h1 id="很好的色彩呃？"><a href="#很好的色彩呃？" class="headerlink" title="很好的色彩呃？"></a><strong>很好的色彩呃？</strong></h1><p>根据题目和图片，图片的颜色十六进制号可能是flag的十六进制编码，<br>有两种办法:<br>1.用 <code>qq截屏</code> 时，按住<code>ctrl</code>和<code>c</code><br><img src="/2021/03/11/BUU15/8.png"><br>2.用ps<br><img src="/2021/03/11/BUU15/9.png"><br>得到十六进制字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6161706a6573</span><br></pre></td></tr></table></figure><p>解ascii码得到flag</p><hr><hr><hr><h1 id="GUET-CTF2019-520的暗示"><a href="#GUET-CTF2019-520的暗示" class="headerlink" title="[GUET-CTF2019]520的暗示"></a><strong>[GUET-CTF2019]520的暗示</strong></h1><p>十六进制打开dat文件<br>看起来像33异或运算<br><img src="/2021/03/11/BUU15/10.png"><br>得到一张图片<br><img src="/2021/03/11/BUU15/11.png"><br>不会搞了<br><img src="/2021/03/11/BUU15/12.png"><br> 后面其实是根据LTE定位基站地址，最后定位到桂林电子科技大学花江校区，也就是flag为flag{桂林电子科技大学花江校区}。<br>地址： <a href="https://www.opengps.cn/Data/Cell/Search.aspx">https://www.opengps.cn/Data/Cell/Search.aspx</a></p><hr><hr><hr><h1 id="key不在这里"><a href="#key不在这里" class="headerlink" title="key不在这里"></a><strong>key不在这里</strong></h1><p>扫二维码是个链接<br>有一大坨数字<br><img src="/2021/03/11/BUU15/13.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568</span><br></pre></td></tr></table></figure><p> 直接ascii码转</p><p><img src="/2021/03/11/BUU15/14.png"><br>转url得到flag<br><img src="/2021/03/11/BUU15/15.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU流量分析1</title>
      <link href="2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/"/>
      <url>2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/</url>
      
        <content type="html"><![CDATA[<h1 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a><strong>菜刀666</strong></h1><p>菜刀一般都是POST上传</p><p>所以我们直接过滤出POST数据包</p><p>http.request.method==POST</p><p>在tcp.stream eq 7中发现了大量数据<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/1.png"><br> FF D8开头FF D9结尾，判断为jpg图片，将这些十六进制复制出来，以原始文件流写入文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Author: MoChu7</span><br><span class="line">import struct</span><br><span class="line"></span><br><span class="line">a &#x3D; open(&quot;str.txt&quot;,&quot;r&quot;)#十六进制数据文件</span><br><span class="line">lines &#x3D; a.read()</span><br><span class="line">res &#x3D; [lines[i:i+2] for i in range(0,len(lines),2)]</span><br><span class="line"></span><br><span class="line">with open(&quot;res.jpg&quot;,&quot;wb&quot;) as f:</span><br><span class="line">for i in res:</span><br><span class="line">s &#x3D; struct.pack(&#39;B&#39;,int(i,16))</span><br><span class="line">f.write(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s&#x3D;&#39;填写16进制数据&#39;</span><br><span class="line">import binascii</span><br><span class="line">out&#x3D;open(&#39;2.jpg&#39;,&#39;wb&#39;)</span><br><span class="line">out.write(binascii.unhexlify(s))</span><br><span class="line">out.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/2.png"><br>在这个流中还发现了传输了一个hello.zip<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/3.png"></p><p> foremost分离流量包，得到一个zip，输入上面图片上的密码<br>解压得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a><strong>被偷走的文件</strong></h1><p> 传输文件看到了ftp协议，过滤，追踪，</p><p><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/4.png"><br>看到了压缩包，foremost分离</p><p><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/5.png"></p><p>数字暴力破解得到flag<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/6.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;6fe99a5d03fb01f833ec3caa80358fa3&#125;</span><br></pre></td></tr></table></figure><h1 id="秘密文件"><a href="#秘密文件" class="headerlink" title="秘密文件"></a><strong>秘密文件</strong></h1><p>binwalk 分离得到一个压缩包<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/7.png"><br>暴力破解得到密码1903<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/8.png"><br>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d72e5a671aa50fa5f400e5d10eedeaa5&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="sqltest"><a href="#sqltest" class="headerlink" title="sqltest"></a><strong>sqltest</strong></h1><p>是个流量包,拖进wireshark里,发现有很多盲注痕迹<br>常规操作,导出HTTP进行分析,save all后在文件夹里进行排序<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/9.png"><br>当盲注结果为true时文件大小都是780b,经过文件内容的对比,发现都有Version被注出,根据条件找到有flag信息的盲注点,按名称和文件大小的排序提取ascil值<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/10.png"><br>转换后:flag{47edb8300ed5f9b28fc54b0d09ecdef7}</p><hr><hr><hr><h1 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john-in-the-middle"></a><strong>john-in-the-middle</strong></h1><p> 可以看到都是HTTP的数据包，导出HTTP得到如下：<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/11.png"><br>看文件的名字仿佛是一个线索<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/13.png"><br>使用stegslove打开scanlines.png，在很多通道都发现了一条线<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/14.png"><br> 然后发现logo.png图片中貌似有条缺口<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/15.png"><br> 将两张图片使用stegslove进行Image Combiner进行对比<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/16.png"><br> 调整到SUB时发现flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;J0hn_th3_Sn1ff3r&#125;</span><br></pre></td></tr></table></figure><h1 id="V-amp-N2020-公开赛-拉胯的三条命令"><a href="#V-amp-N2020-公开赛-拉胯的三条命令" class="headerlink" title="[V&amp;N2020 公开赛]拉胯的三条命令"></a><strong>[V&amp;N2020 公开赛]拉胯的三条命令</strong></h1><p> 题目文件zip</p><p><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/17.png"><br> zip文件，添加后缀zip<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/18.png"><br> 说明.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在参加网络安全大赛第二届世界巡回赛新加坡站一场与SP战队的比赛时，作为K&amp;K战队主防手的你使用经典的“三条命令”检查端口封闭状况。可是这次比赛平台没有回显，你能查出来有哪些端口是开放的嘛？</span><br><span class="line">请将开放端口按由小到大顺序写入flag中 如：开放1、22、234端口，flag&#123;122234&#125;</span><br></pre></td></tr></table></figure><p>wireshark打开nmapll.pcapng，在编辑-&gt;首选项-&gt;外观-&gt;列添加一个Port类型选择Dest port(unresolved)<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/19.png"><br> 以port列降序排序，查找每个端口是否有[ACK]响应标志，众所周知在TCP三次握手中，[SYN]标志表示建立连接，[ACK]表示响应，查看开放端口，肯定会返回[ACK]标志<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/20.png"><br> 这样手工找下去可以得到开放的端口有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1.21</span><br><span class="line">127.0.0.1.22</span><br><span class="line">127.0.0.1.631</span><br><span class="line">127.0.0.1.801</span><br><span class="line">127.0.0.1.3306</span><br></pre></td></tr></table></figure><p>也可以使用工具Tcpdump</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -n -r nmapll.pcapng &#39;tcp[13] &#x3D; 18&#39; | awk &#39;&#123;print $3&#125;&#39; | sort -u</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@mochu7:&#x2F;mnt&#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;Downloads&#x2F;zip1# tcpdump -n -r nmapll.pcapng &#39;tcp[13] &#x3D; 18&#39; | awk &#39;&#123;print $3&#125;&#39; | sort -u</span><br><span class="line">reading from file nmapll.pcapng, link-type EN10MB (Ethernet)</span><br><span class="line">127.0.0.1.21</span><br><span class="line">127.0.0.1.22</span><br><span class="line">127.0.0.1.3306</span><br><span class="line">127.0.0.1.631</span><br><span class="line">127.0.0.1.801</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;21226318013306&#125;</span><br></pre></td></tr></table></figure><h1 id="ACTF新生赛2020-swp"><a href="#ACTF新生赛2020-swp" class="headerlink" title="[ACTF新生赛2020]swp"></a><strong>[ACTF新生赛2020]swp</strong></h1><p>解压后在wget.zip中发现个数据包，解压后用wireshark打开，看着像http数据传输</p><p>导出http<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/21.png"><br>在导出的文件中发现一个secret.zip<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/22.png"><br>打开得到flag<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/23.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actf&#123;c5558bcf-26da-4f8b-b181-b61f3850b9e5&#125;</span><br></pre></td></tr></table></figure><h1 id="百里挑一"><a href="#百里挑一" class="headerlink" title="百里挑一"></a><strong>百里挑一</strong></h1><p>解压文件得到的是pcap数据包，题目提示好多图片，<br>wireshark打开导出http对象，保存到一个文件夹中。然后在kali中使用一条命令找到一半的flag<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/24.png"><br> 另一半需要在wireshark中找, 看了wp发现是114……郁闷💔<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/25.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ae58d0408e26e8f26a3c0589d23edeec&#125;</span><br></pre></td></tr></table></figure><h1 id="安洵杯-2019-Attack"><a href="#安洵杯-2019-Attack" class="headerlink" title="[安洵杯 2019]Attack"></a><strong>[安洵杯 2019]Attack</strong></h1><p>流量分析题，学到了一个新工具mimikatz</p><blockquote><p>mimikatz 在内网渗透中是个很有用的工具。它可能让攻击者从内存中抓到明文密码。</p></blockquote><p><strong>考点:</strong></p><ol><li>数据包流量分析</li><li>蚁剑流量特征</li><li>procdump的使用</li></ol><p><strong>题解：</strong><br>使用wireshark打开数据包，简单看一下应该是进行了扫目录操作：<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/26.png"><br>然后对TCP流进行分析，发现一处对upload.php的POST请求：<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/27.png"><br>然后追踪TCP流，发现上传了一句话木马：<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/28.png"><br>接着往下分析，发现一组TCP流量疑似执行了命令，请求流量经过了base64混淆，返回流量用了ROT13<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/29.png"><br>继续跟TCP流发现列目录列出来了一个s3cret.zip<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/30.png"><br>下一组流量中出现了一组看起来是zip的数据：<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/31.png"><br>查看hex数据发现50 4B 03 04的zip文件头，将其拿出来导入到010editor中保存为zip：<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/32.png"><br>但是发现需要解压密码，打开发现hint<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/33.png"><br>然后可以得到意思是解压密码为administrator的密码，于是继续回去看流量，发现执行了procdump.exe这个工具<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/34.png"><br>如果不熟悉的这个工具话可以使用搜索引擎得知该工具一般用来抓取windows的lsass进程中的用户明文密码</p><p>紧接着发现攻击者通过http下载了lsass.dmp文件<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/35.png"><br>我们将该文件导出，然后导入mimikatz即可得到administrator的密码<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/36.png"><br>之后再拿过去解压就得到flag<br><img src="/2021/03/10/BUU%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901/37.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag：D0g3&#123;3466b11de8894198af3636c5bd1efce2&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU14</title>
      <link href="2021/03/10/BUU14/"/>
      <url>2021/03/10/BUU14/</url>
      
        <content type="html"><![CDATA[<h1 id="GWCTF2019-huyao"><a href="#GWCTF2019-huyao" class="headerlink" title="[GWCTF2019]huyao"></a><strong>[GWCTF2019]huyao</strong></h1><p>下载得到两个肉眼看着一样的图片 盲猜盲水印<br>用github上那个最常见的脚本和stegsolve没用<br>用1的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python decode.py --original huyao.png --image stillhuyao.png --result res.png</span><br></pre></td></tr></table></figure><p><img src="/2021/03/10/BUU14/1.png"></p><h1 id="GUET-CTF2019-soul-sipse"><a href="#GUET-CTF2019-soul-sipse" class="headerlink" title="[GUET-CTF2019]soul sipse"></a><strong>[GUET-CTF2019]soul sipse</strong></h1><p>这里是音频隐写，用steghide解密<br><img src="/2021/03/10/BUU14/2.png"><br>修改下载得到的png文件头，使其可以打开<br><img src="/2021/03/10/BUU14/3.png"><br>Unicode编码<br><img src="/2021/03/10/BUU14/4.png"><br>解出来两个数字<br><img src="/2021/03/10/BUU14/5.png"><br>相加即为flag<br><img src="/2021/03/10/BUU14/6.png"></p><hr><hr><hr><h1 id="UTCTF2020-sstv"><a href="#UTCTF2020-sstv" class="headerlink" title="[UTCTF2020]sstv"></a><strong>[UTCTF2020]sstv</strong></h1><p><strong>慢扫描电视（SSTV）</strong></p><p>慢扫描电视（Slow-scan television）是业余无线电爱好者的一种主要图片传输方法，慢扫描电视通过无线电传输和接收单色或彩色静态图片。<br><img src="/2021/03/10/BUU14/8.png"><br>使用QSSTV将慢速扫描电视传输(SSTV)音频文件转换(解码)为图像<br><img src="/2021/03/10/BUU14/7.png"></p><hr><hr><hr><h1 id="UTCTF2020-spectogram"><a href="#UTCTF2020-spectogram" class="headerlink" title="[UTCTF2020]spectogram"></a><strong>[UTCTF2020]spectogram</strong></h1><p>用Audacity打开wav，看频谱图。<br><img src="/2021/03/10/BUU14/9.png"></p><hr><hr><hr><h1 id="UTCTF2020-File-Carving"><a href="#UTCTF2020-File-Carving" class="headerlink" title="[UTCTF2020]File Carving"></a><strong>[UTCTF2020]File Carving</strong></h1><p>foremost分离后得到一个压缩包<br>运行压缩包中hidden_binary得到flag</p><p><img src="/2021/03/10/BUU14/10.png"><br>（strings命令也可得到）</p><hr><hr><hr><h1 id="python-我爱Linux"><a href="#python-我爱Linux" class="headerlink" title="python 我爱Linux"></a><strong>python 我爱Linux</strong></h1><p>Python Picke序列化内容<br>然后打印坐标</p><hr><hr><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU13</title>
      <link href="2021/03/09/BUU13/"/>
      <url>2021/03/09/BUU13/</url>
      
        <content type="html"><![CDATA[<h1 id="wireshark-voip"><a href="#wireshark-voip" class="headerlink" title="wireshark voip"></a><strong>wireshark voip</strong></h1><hr><hr><hr><h1 id="UTCTF2020-zero"><a href="#UTCTF2020-zero" class="headerlink" title="[UTCTF2020]zero"></a><strong>[UTCTF2020]zero</strong></h1><p>一个文本文件 刚开始以为类似凯撒之类的 ，用自己写的脚本跑出来奇奇怪怪的结果<br>放cyberchef 贴进去就可以看到很多点 猜测零宽字节<br><img src="/2021/03/09/BUU13/2.png"><br>应该是零字节解密： <a href="http://330k.github.io/misc_tools/unicode_steganography.html">http://330k.github.io/misc_tools/unicode_steganography.html</a><br><img src="/2021/03/09/BUU13/3.png"><br>得到flag</p><hr><hr><hr><h1 id="QCTF2018-X-man-A-face"><a href="#QCTF2018-X-man-A-face" class="headerlink" title="[QCTF2018]X-man-A face"></a><strong>[QCTF2018]X-man-A face</strong></h1><p>补全二维码得到一串base32字符<br><img src="/2021/03/09/BUU13/3.png"><br>解码得到flag<br><img src="/2021/03/09/BUU13/4.png"></p><hr><hr><hr><h1 id="Business-Planning-Group"><a href="#Business-Planning-Group" class="headerlink" title="Business Planning Group"></a><strong>Business Planning Group</strong></h1><p>winhex打开在结尾找到bpg图片<br><img src="/2021/03/09/BUU13/5.png"><br>在网上搜了一下，这种bpg图片可以用Honeyview打开<br><img src="/2021/03/09/BUU13/6.png"><br>解码base64得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;BPG_i5_b3tt3r_7h4n_JPG&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="ACTF新生赛2020-剑龙"><a href="#ACTF新生赛2020-剑龙" class="headerlink" title="[ACTF新生赛2020]剑龙"></a><strong>[ACTF新生赛2020]剑龙</strong></h1><p>打开后发现有一个hint<br><img src="/2021/03/09/BUU13/7.png"><br>先将pwd解密<br><img src="/2021/03/09/BUU13/8.png"><br>steghide将图片解密<br><img src="/2021/03/09/BUU13/9.png"><br>des加密，密钥藏在属性里<br><img src="/2021/03/09/BUU13/10.png"><br>揭秘得到要用stegsaurus<br><img src="/2021/03/09/BUU13/11.png"><br>这里搞不出来了<br><img src="/2021/03/09/BUU13/12.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020上海大学生网络安全赛MISC可乐加冰</title>
      <link href="2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/"/>
      <url>2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/</url>
      
        <content type="html"><![CDATA[<p>题目附件是一张PNG图片：<br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/1.png"><br> 丢到tweakpng里检测一下，发现两个报错：<br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/2.png"><br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/3.png"><br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/4.png"><br> 分析发现三个IDAT块是没问题的，但是多出了一个无法识别的DATx块，而且没有识别出结尾块IEND，放进Winhex里查看也证实了这一点。<br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/5.png"><br>在Winhex中看出文件尾是不完整的，正常的文件尾应该是 0000 49454E44 AE426082</p><p>结合之前tweakpng里的报错：Incorrect crc for DATx chunk (is 9c4e1c00,should be 886b1f6d)，即DATx块的CRC校验码不正确，断定DATx中存在大问题。</p><p>（PS：注意一下这里tweakpng提示的CRC校验码不正确是因为DATx里藏了zlib把结尾的CRC校验码覆盖了，不要试着改回去，不然就把路走窄了，别问我怎么知道的！）<br>binwalk跑一下发现存在zlib：<br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/6.png"><br> 在DATx块开头的地方也找到了zlib的文件头：<br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/15.png"><br>（这里选zlib一直选到文件尾也是可以的，解出来的字符串是一样的）</p><p>右键-&gt;Edit-&gt;CopyBlock-&gt;HexValues把16进制数值复制出来用Python脚本解压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import zlib</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">#Winhex提取的十六进制zlib数据</span><br><span class="line">data &#x3D;&quot;789C558EC111C02008049B72AE012736660DDBAF0449800FC7B8B0B89724E65E0259005EDFDE48441BD01CCFF0878BB958B1C38FA9F4532555091F2269C8BABAFEAD6B9B843C6EE000679C4E1C00&quot;</span><br><span class="line"></span><br><span class="line">#默认将十六进制作为字符串解码，会出现错误，要将十六进制转换成字节码</span><br><span class="line">data1 &#x3D; bytes.fromhex(data)#十六进制转字节码</span><br><span class="line">#print(data1)</span><br><span class="line"></span><br><span class="line">data2 &#x3D; zlib.decompress(data1)#zlib解压字节码</span><br><span class="line">#print(data2)</span><br><span class="line"></span><br><span class="line">data3 &#x3D; binascii.hexlify(data2)#字节码转十六进制</span><br><span class="line">print(data3)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑出来一串纯数字的字符串：<br>b’834636363695438346369595364383469595954383469595364383463636363643834636363695438346369595364383469595364334453443834636953636438346369536954383463636953643834636369543344534438346369595438346369536954383463636363643834636363643344534438346369595364383463695953643834636369543834695363643344534438346363695364383463695369543834636369536438346369595954383469595364383469536954383463636363643834636953643834636369543834695369543834636959543834636369536’</p><p>每两位作一个十进制数，将字符串转为Ascii码（此处经大佬点化）</p><p>Python脚本每两位加空格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">data &#x3D; &quot;834636363695438346369595364383469595954383469595364383463636363643834636363695438346369595364383469595364334453443834636953636438346369536954383463636953643834636369543344534438346369595438346369536954383463636363643834636363643344534438346369595364383463695953643834636369543834695363643344534438346363695364383463695369543834636369536438346369595954383469595364383469536954383463636363643834636953643834636369543834695369543834636959543834636369536&quot;</span><br><span class="line">data_list &#x3D; re.findall(&quot;.&#123;2&#125;&quot;,data)</span><br><span class="line">data1 &#x3D; &quot; &quot;.join(data_list)</span><br><span class="line"></span><br><span class="line">print(data1)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>十进制转Ascii码+删除空格：（<a href="http://www.ab126.com/goju/1711.html%EF%BC%89">http://www.ab126.com/goju/1711.html）</a></p><p><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/7.png"><br>转换后：</p><p><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/8.png"><br> 将S转为$:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">str &#x3D; &#39;S.$$$_+S.$__$+S.___+S.__$+S.$$$$+S.$$$_+S.$__$+S.__$+&quot;-&quot;+S.$_$$+S.$_$_+S.$$_$+S.$$_+&quot;-&quot;+S.$__+S.$_$_+S.$$$$+S.$$$+&quot;-&quot;+S.$__$+S.$__$+S.$$_+S._$$+&quot;-&quot;+S.$$_$+S.$_$_+S.$$_$+S.$___+S.__$+S._$_+S.$$$$+S.$_$+S.$$_+S._$_+S.$__+S.$$_$&#39;;</span><br><span class="line"></span><br><span class="line">str1 &#x3D; str.replace(&#39;S&#39;, &#39;$&#39;);</span><br><span class="line"></span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>转换后：<br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/9.png"><br>得到一串JJEncod码。<br>这里贴一点我对JJEncode的理解：<br>先看别处拿来的解释：</p><p><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/10.png"><br>亲自尝试后发现这个JJEncode加密之后有一个外壳（就是你加密的JavaScript的代码，这里是alert(“”);）<br>（<a href="http://www.atoolbox.net/Tool.php?Id=704%EF%BC%89">http://www.atoolbox.net/Tool.php?Id=704）</a></p><p><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/11.png"><br> 综上，解出来的JJEncode是里面那一串（相当于555），所以构造一个外壳之后是这样的：<br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/12.png"><br>注意不要少了与壳连接的+号，不然会报错无法运行。</p><p>放到浏览器控制台跑一下：<br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/13.png"><br><img src="/2021/03/08/2020%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9BMISC%E5%8F%AF%E4%B9%90%E5%8A%A0%E5%86%B0/14.png"><br> 得到flag为flag{e901fe91-bad6-4af7-9963-dad812f5624d}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU12</title>
      <link href="2021/03/06/BUU12/"/>
      <url>2021/03/06/BUU12/</url>
      
        <content type="html"><![CDATA[<h1 id="真的很杂"><a href="#真的很杂" class="headerlink" title="真的很杂"></a><strong>真的很杂</strong></h1><p>foremost分离出一个压缩包，里面的内容看着像apk文件，考虑进行反汇编</p><p>方法一：apktools</p><p>改后缀名为apk，命令：apktool d 00000010.apk<br><img src="/2021/03/06/BUU12/1.png"><br>生成的00000010文件就是源码了，在\smali\com\example\flag\MainActivity$1.smali文件里发现字符串：”TOO YOUNG TOO SIMPLE:flag{25f991b27f”，”dc2f7a82a2b34”，”86e81c4}”<br><img src="/2021/03/06/BUU12/2.png"><br>猜测flag{25f991b27f?dc2f7a82a2b34?86e81c4}，前一个是字母，后一个数字，爆破即可flag{25f991b27fcdc2f7a82a2b34386e81c4}</p><p>方法二：dex2jar和jd-gui</p><p>解压后的classes.dex放到dex2jar目录，命令：d2j-dex2jar classes.dex<br><img src="/2021/03/06/BUU12/3.png"><br>将生成的classes-dex2jar.jar用jd-gui打开，同样得到：</p><p>flag{25f991b27f?dc2f7a82a2b34?86e81c4}，再爆破，flag{25f991b27fcdc2f7a82a2b34386e81c4}<br><img src="/2021/03/06/BUU12/4.png"><br>作者：Du1in9<br>链接：<a href="https://www.jianshu.com/p/1a318f2b4082">https://www.jianshu.com/p/1a318f2b4082</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><hr><hr><hr><h1 id="湖南省赛2019-Findme"><a href="#湖南省赛2019-Findme" class="headerlink" title="[湖南省赛2019]Findme"></a><strong>[湖南省赛2019]Findme</strong></h1><p>下载得到五个图片如图<br><img src="/2021/03/06/BUU12/10.png"></p><blockquote><p><strong>1.png</strong><br>第一张图明显是修改图片大小<br><img src="/2021/03/06/BUU12/5.png"><br>这里有大佬的脚本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import zlib</span><br><span class="line">import struct</span><br><span class="line">file &#x3D; &#39;1.png&#39;</span><br><span class="line">fr &#x3D; open(file,&#39;rb&#39;).read()</span><br><span class="line">data &#x3D; bytearray(fr[12:29])</span><br><span class="line">#crc32key &#x3D; eval(str(fr[29:33]).replace(&#39;\\x&#39;,&#39;&#39;).replace(&quot;b&#39;&quot;,&#39;0x&#39;).replace(&quot;&#39;&quot;,&#39;&#39;)) </span><br><span class="line">crc32key &#x3D; 0xC4ED3 </span><br><span class="line">#data &#x3D; bytearray(b&#39;\x49\x48\x44\x52\x00\x00\x01\xF4\x00\x00\x01\xF1\x08\x06\x00\x00\x00&#39;) </span><br><span class="line">n &#x3D; 4095 </span><br><span class="line">for w in range(n): </span><br><span class="line">    width &#x3D; bytearray(struct.pack(&#39;&gt;i&#39;, w))</span><br><span class="line">    for h in range(n): </span><br><span class="line">        height &#x3D; bytearray(struct.pack(&#39;&gt;i&#39;, h)) </span><br><span class="line">        for x in range(4): </span><br><span class="line">            data[x+4] &#x3D; width[x] </span><br><span class="line">            data[x+8] &#x3D; height[x] </span><br><span class="line">            #print(data) </span><br><span class="line">        crc32result &#x3D; zlib.crc32(data) </span><br><span class="line">        if crc32result &#x3D;&#x3D; crc32key: </span><br><span class="line">            print(width,height) </span><br><span class="line">            print(data) </span><br><span class="line">            newpic &#x3D; bytearray(fr) </span><br><span class="line">            for x in range(4): </span><br><span class="line">                newpic[x+16] &#x3D; width[x]</span><br><span class="line">                newpic[x+20] &#x3D; height[x] </span><br><span class="line">            fw &#x3D; open(file+&#39;.png&#39;,&#39;wb&#39;) </span><br><span class="line">            fw.write(newpic) </span><br><span class="line">            fw.close </span><br></pre></td></tr></table></figure><p>复原之后如图所示<br><img src="/2021/03/06/BUU12/6.png"><br>这里又学到了IDAT标识<br>010 editor打开，发现chunk[2]、chunk[3]缺少IDAT标识<br>IDAT十六进制标识为：49 44 41 54，将两个chunk的IDAT在union CTYPE type的位置补上即可得到完整的图片<br><img src="/2021/03/06/BUU12/7.png"><br>在stegsolve中发现了二维码<br><img src="/2021/03/06/BUU12/8.png"><br>解码得到第一段base64<br><img src="/2021/03/06/BUU12/9.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.png &#x3D;&gt; ZmxhZ3s0X3</span><br></pre></td></tr></table></figure><blockquote><p><strong>2.png</strong></p></blockquote><p>zsteg分析后发现了异常，貌似有7z压缩包<br>但是binwalk没有检测也无法分离<br><img src="/2021/03/06/BUU12/11.png"><br>到了010editor提取后无法打开，发现应该是将PK改为了7z<br><img src="/2021/03/06/BUU12/12.png"><br>将7z全部改为PK，发现可以打开了<br><img src="/2021/03/06/BUU12/13.png"><br>将txt文件从大到小排列，得到第二段base64<br><img src="/2021/03/06/BUU12/14.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P2：1RVcmVfc</span><br></pre></td></tr></table></figure><blockquote><p><strong>3.png</strong><br>虚拟机中图片打不开，说明图片是有问题的<br><img src="/2021/03/06/BUU12/15.png"><br>在010editor中检查发现图片的crc值是有问题的<br><img src="/2021/03/06/BUU12/16.png"><br>将每段都提取出来，转换得到第三段base64<br><img src="/2021/03/06/BUU12/17.png"></p></blockquote><blockquote><p><strong>4.png</strong><br>这个就比较简单了，在十六进制尾端直接发现了base64</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P4：cExlX1BsY</span><br></pre></td></tr></table></figure><p><img src="/2021/03/06/BUU12/18.png"></p><blockquote><p><strong>5.png</strong><br>同样在十六进制尾端<br><img src="/2021/03/06/BUU12/19.png"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P5：Yzcllfc0lN</span><br></pre></td></tr></table></figure><p>组合在一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P1:ZmxhZ3s0X3</span><br><span class="line">P2:1RVcmVfc</span><br><span class="line">P3:3RlZ30&#x3D;</span><br><span class="line">P4:cExlX1BsY</span><br><span class="line">P5:Yzcllfc0lN</span><br></pre></td></tr></table></figure><p>P1是开头，P3是结尾<br>其他的一个一个试得到最终的base64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZ3s0X3Yzcllfc0lNcExlX1BsY1RVcmVfc3RlZ30&#x3D;</span><br></pre></td></tr></table></figure><p>解码得到flag<br><img src="/2021/03/06/BUU12/20.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;4_v3rY_sIMpLe_PlcTUre_steg&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU11</title>
      <link href="2021/03/05/BUU11/"/>
      <url>2021/03/05/BUU11/</url>
      
        <content type="html"><![CDATA[<h1 id="UTCTF2020-basic-forensics"><a href="#UTCTF2020-basic-forensics" class="headerlink" title="[UTCTF2020]basic-forensics"></a><strong>[UTCTF2020]basic-forensics</strong></h1><p>打开后看到了很长的英文文章，还像是啥字频分析，结果直接搜了出来<br><img src="/2021/03/05/BUU11/1.png"><br><img src="/2021/03/05/BUU11/2.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utflag&#123;fil3_ext3nsi0ns_4r3nt_r34l&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="SCTF2019-电单车"><a href="#SCTF2019-电单车" class="headerlink" title="[SCTF2019]电单车"></a><strong>[SCTF2019]电单车</strong></h1><p>打开音频文件看到了长短波，<br><img src="/2021/03/05/BUU11/3.png"><br>半天没搞明白要干嘛，结果发现了原题里有描述</p><blockquote><p>题目描述：截获了一台电动车的钥匙发出的锁车信号，3分钟之内，我要获得它地址位的全部信息。flag内容二进制表示即可。</p></blockquote><p>整理出二进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0111010010101010011000100 0111010010101010011000100</span><br></pre></td></tr></table></figure><p>地址位是中间的前20个bit:<br>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;01110100101010100110&#125;</span><br></pre></td></tr></table></figure><p>参考链接地址：<a href="https://www.freebuf.com/articles/wireless/191534.html">https://www.freebuf.com/articles/wireless/191534.html</a></p><hr><hr><hr><h1 id="CTF2019-otaku"><a href="#CTF2019-otaku" class="headerlink" title="*[CTF2019]otaku"></a>*<em>[<em>CTF2019]otaku</em></em></h1><p>始终没明白这个明文攻击<br>大佬的wp(<a href="https://blog.csdn.net/zxnimud5/article/details/108800686">https://blog.csdn.net/zxnimud5/article/details/108800686</a>) </p><hr><hr><hr><h1 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a><strong>hashcat</strong></h1><p>1文件没有后缀，用file命令后，除了知道有密码，没啥可用信息，binwalk分析后发现是office文件<br><img src="/2021/03/05/BUU11/4.png"><br>将后缀改为doc，发现需要密码<br><img src="/2021/03/05/BUU11/8.png"><br>破解办公文件用Accent OFFICE Password Recovery v5.1 CracKed By Hmily[LCG][LSG]工具<br><img src="/2021/03/05/BUU11/5.png"><br>爆出9919，<br>结果word文件打不开，xls打不开，改后缀为pptx打开了，<br><img src="/2021/03/05/BUU11/6.png"><br>第7张白白的，搜索flag,有，替换颜色。<br><img src="/2021/03/05/BUU11/7.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag&#123;okYOUWIN&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU10</title>
      <link href="2021/03/04/BUU10/"/>
      <url>2021/03/04/BUU10/</url>
      
        <content type="html"><![CDATA[<h1 id="粽子的来历"><a href="#粽子的来历" class="headerlink" title="粽子的来历"></a><strong>粽子的来历</strong></h1><p>打开压缩包里面有4个坏掉了的word文件</p><p><img src="/2021/03/04/BUU10/1.png"><br>放入16进制，每一个word文件中都加了一串字符，<br>在C中看到了题目提示的DBAPP，将C中那一串字符全部改为ff<br><img src="/2021/03/04/BUU10/2.png"><br>打开发现行高不一样，想到了二进制<br><img src="/2021/03/04/BUU10/3.png"><br>1.5倍行高为1，1倍行高为0，得到下列二进制<br><img src="/2021/03/04/BUU10/4.png"><br>将二进制进行md5加密得到flag<br><img src="/2021/03/04/BUU10/5.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d473ee3def34bd022f8e5233036b3345&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="wireshark-BSidesSF2019-zippy"><a href="#wireshark-BSidesSF2019-zippy" class="headerlink" title="wireshark [BSidesSF2019]zippy"></a><strong>wireshark [BSidesSF2019]zippy</strong></h1><hr><hr><hr><h1 id="UTCTF2020-file-header"><a href="#UTCTF2020-file-header" class="headerlink" title="[UTCTF2020]file header"></a><strong>[UTCTF2020]file header</strong></h1><p>将文件头改为正确png形式得到flag<br><img src="/2021/03/04/BUU10/6.png"><br><img src="/2021/03/04/BUU10/7.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3lit3_h4ck3r&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="WUSTCTF2020-spaceclub"><a href="#WUSTCTF2020-spaceclub" class="headerlink" title="[WUSTCTF2020]spaceclub"></a><strong>[WUSTCTF2020]spaceclub</strong></h1><p>txt打开看不到内容<br>sublime打开全选发现长短点<br>猜测二进制，<br>替换后在线解密,猜测正确<br>ps： 二进制要转16进制后再解ascii<br><img src="/2021/03/04/BUU10/8.png"><br><img src="/2021/03/04/BUU10/9.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;h3re_1s_y0ur_fl@g_s1x_s1x_s1x&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="ACTF新生赛2020-music"><a href="#ACTF新生赛2020-music" class="headerlink" title="[ACTF新生赛2020]music"></a><strong>[ACTF新生赛2020]music</strong></h1><p>学到了新东西，异或运算</p><p><img src="/2021/03/04/BUU10/10.png"><br>发现十六进制中有很多A1<br><img src="/2021/03/04/BUU10/11.png"><br>猜测对整个原文件进行了异或，使用<code>010 Editor</code>在<code>工具</code>-&gt;<code>十六进制运算</code>-&gt;<code>二进制异或</code>对整个文件内容进行异或<br><img src="/2021/03/04/BUU10/12.png"><br>得到一个音频文件，<br><img src="/2021/03/04/BUU10/13.png"><br>直接听即可得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;abcdfghijk&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU9</title>
      <link href="2021/03/03/BUU9/"/>
      <url>2021/03/03/BUU9/</url>
      
        <content type="html"><![CDATA[<h1 id="GKCTF2020-Harley-Quinn"><a href="#GKCTF2020-Harley-Quinn" class="headerlink" title="[GKCTF2020]Harley Quinn"></a><strong>[GKCTF2020]Harley Quinn</strong></h1><p>打开压缩包内容如下<br><img src="/2021/03/03/BUU9/5.png"><br>有一张图片和一个mav音频<br>听到音频的尾端有电话拨号码，用audacity将其提取出来<br><img src="/2021/03/03/BUU9/1.png"><br>用dtmf2num转出来数字<br><img src="/2021/03/03/BUU9/2.png"><br>九建编码解码出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfisfun</span><br></pre></td></tr></table></figure><p>根据提示下载了FreeFileCamouflage<br>按照如图解出flag<br><img src="/2021/03/03/BUU9/3.png" alt="1"><br>得到flag<br><img src="/2021/03/03/BUU9/4.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Pudd1n!!_y0u_F1nd_m3!&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="python-派大星的烦恼"><a href="#python-派大星的烦恼" class="headerlink" title="python 派大星的烦恼"></a><strong>python 派大星的烦恼</strong></h1><hr><hr><hr><h1 id="ACTF新生赛2020-明文攻击"><a href="#ACTF新生赛2020-明文攻击" class="headerlink" title="[ACTF新生赛2020]明文攻击"></a><strong>[ACTF新生赛2020]明文攻击</strong></h1><p>这个明文攻击了两个小时也没破解出来</p><hr><hr><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU8</title>
      <link href="2021/03/01/BUU8/"/>
      <url>2021/03/01/BUU8/</url>
      
        <content type="html"><![CDATA[<h1 id="MRCTF2020-不眠之夜"><a href="#MRCTF2020-不眠之夜" class="headerlink" title="[MRCTF2020]不眠之夜"></a><strong>[MRCTF2020]不眠之夜</strong></h1><p>这个题真是搞了大半天<br>看了好多wp都不管用<br>这里要用到montage和gaps两个命令<br>首先用montage命令合成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">montage *.jpg -tile 10x12 -geometry +0+0 out.jpg</span><br></pre></td></tr></table></figure><p>得到合成后的图片<br><img src="/2021/03/01/BUU8/1.png"></p><p>然后再用gaps恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gaps --image&#x3D;out.jpg --size&#x3D;200</span><br></pre></td></tr></table></figure><p>得到恢复图片<br><img src="/2021/03/01/BUU8/2.png"><br>这里借鉴的这位大佬的<a href="https://www.cnblogs.com/wrnan/p/12912705.html#mrctf2020%E4%B8%8D%E7%9C%A0%E4%B9%8B%E5%A4%9C">wp</a></p><hr><hr><hr><h1 id="python-安洵杯-2019-easy-misc"><a href="#python-安洵杯-2019-easy-misc" class="headerlink" title="python [安洵杯 2019]easy misc"></a><strong>python [安洵杯 2019]easy misc</strong></h1><hr><hr><hr><h1 id="MRCTF2020-Unravel"><a href="#MRCTF2020-Unravel" class="headerlink" title="[MRCTF2020]Unravel!!"></a><strong>[MRCTF2020]Unravel!!</strong></h1><blockquote><p><strong>考察内容:</strong><br>图片隐藏压缩包，aes加密，十六进制尾端隐写，<strong>silenteye</strong></p></blockquote><p>题目内容如图所示</p><p><img src="/2021/03/01/BUU8/3.png"><br>binwalk发现在png图片中有隐藏zip文件却分离不出来<br><img src="/2021/03/01/BUU8/4.png"><br>打开压缩包发现一个名为aes.png的图片<br><img src="/2021/03/01/BUU8/5.png"><br><code>Tokyo</code><br>应该还有aes密文<br>在Look_at_the_file_ending.wav的尾端找到了aes密文<br><img src="/2021/03/01/BUU8/6.png"><br>在线解密得到了win-win.zip的密码<br><img src="/2021/03/01/BUU8/7.png"><br>此wav音频为silenteye隐写<br><img src="/2021/03/01/BUU8/8.png"><br>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRCTF&#123;Th1s_is_the_3nd1n9&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="UTCTF2020-docx"><a href="#UTCTF2020-docx" class="headerlink" title="[UTCTF2020]docx"></a><strong>[UTCTF2020]docx</strong></h1><p>在word文档中未发现flag内容<br>打开document.xml搜索flag、ctf未果<br>在image中发现了flag<br><img src="/2021/03/01/BUU8/9.png"><br><img src="/2021/03/01/BUU8/10.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;unz1p_3v3ryth1ng&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="python-GKCTF2020-code-obfuscation"><a href="#python-GKCTF2020-code-obfuscation" class="headerlink" title="python [GKCTF2020]code obfuscation"></a><strong>python [GKCTF2020]code obfuscation</strong></h1><p>这个同样看了好久<br>要用到ps和python<br><a href="https://www.cnblogs.com/wrnan/p/12912705.html#gkctf2020code-obfuscation">wp1</a><br><a href="https://blog.csdn.net/hiahiachang/article/details/106317765">wp2</a><br><a href="https://blog.csdn.net/mochu7777777/article/details/109655585">wp3</a></p><hr><hr><hr><h1 id="今日小结"><a href="#今日小结" class="headerlink" title="今日小结"></a><strong>今日小结</strong></h1><ol><li>montage和gaps两个命令</li><li>aes加密</li><li>silenteye隐写</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU7</title>
      <link href="2021/02/28/BUU7/"/>
      <url>2021/02/28/BUU7/</url>
      
        <content type="html"><![CDATA[<h1 id="BSidesSF2019-diskimage"><a href="#BSidesSF2019-diskimage" class="headerlink" title="[BSidesSF2019]diskimage"></a><strong>[BSidesSF2019]diskimage</strong></h1><p>下载得到如下图片<br><img src="/2021/02/28/BUU7/1.png"><br>kali中file binwalk zsteg 一套，发现有磁盘数据<br><img src="/2021/02/28/BUU7/2.png"><br>导出磁盘数据，恢复删除文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF$ zsteg -e b8,rgb,lsb,xy 1.png&gt;disk.dat</span><br><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF$ file disk.dat</span><br><span class="line">disk.dat: DOS&#x2F;MBR boot sector, code offset 0x3c+2, OEM-ID &quot;~mitsumi&quot;, root entries 224, sectors 2880 (volumes &lt;&#x3D;32 MB), sectors&#x2F;FAT 9, sectors&#x2F;track 18, serial number 0x7e572f0f, unlabeled, FAT (12 bit), followed by FAT</span><br><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF$ testdisk &#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF&#x2F;disk.dat</span><br><span class="line">TestDisk 7.1, Data Recovery Utility, July 2019</span><br><span class="line">Christophe GRENIER &lt;grenier@cgsecurity.org&gt;</span><br><span class="line">https:&#x2F;&#x2F;www.cgsecurity.org</span><br></pre></td></tr></table></figure><p>得到flag<br><img src="/2021/02/28/BUU7/3.png"><br>这里有两个大佬的wp<br><a href="https://blog.csdn.net/mochu7777777/article/details/110079540">wp2</a><br><a href="https://blog.csdn.net/zippo1234/article/details/109238587">wp1</a></p><hr><hr><hr><h1 id="WUSTCTF2020-爬"><a href="#WUSTCTF2020-爬" class="headerlink" title="[WUSTCTF2020]爬"></a><strong>[WUSTCTF2020]爬</strong></h1><p>下载附件</p><p>得到一个文件<br><img src="/2021/02/28/BUU7/4.png"><br>我们查看一下16进制，发现这是PDF的文件头</p><p><img src="/2021/02/28/BUU7/5.png"><br>我们将文件改为pdf</p><p><img src="/2021/02/28/BUU7/6.png"><br>我们发现里面给出提示说flag被图片盖住了，我们需要将图片移动开吗。</p><p>因为PDF无法直接修改，我们这里将PDF转换为了word。<br>来回移动图片，图片分离<br><img src="/2021/02/28/BUU7/7.png"><br>得到一串十六进制代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x77637466323032307b746831735f31735f405f7064665f616e645f7930755f63616e5f7573655f70686f7430736830707d</span><br></pre></td></tr></table></figure><p>将识别出来的代码复制出来，然后在在线工具进行16进制转字符串。</p><p><img src="/2021/02/28/BUU7/8.png"><br>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;th1s_1s_@_pdf_and_y0u_can_use_phot0sh0p&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="WUSTCTF2020-girlfriend"><a href="#WUSTCTF2020-girlfriend" class="headerlink" title="[WUSTCTF2020]girlfriend"></a><strong>[WUSTCTF2020]girlfriend</strong></h1><p>听起来像是在打电话输入号码的声音，猜测DTMF拨号音识别，有个程序可以识别一下dtmf2num.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">999*666*88*2*777*33*6*999*4*4444*777*555*333*777*444*33*66*3*7777</span><br></pre></td></tr></table></figure><p>这个是手机键盘密码<br>解此段密码得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;youaremygirlfriends&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="MRCTF2020-CyberPunk"><a href="#MRCTF2020-CyberPunk" class="headerlink" title="[MRCTF2020]CyberPunk"></a><strong>[MRCTF2020]CyberPunk</strong></h1><p>把日期改到2020.9.17得到flag</p><p><img src="/2021/02/28/BUU7/9.png"></p><p>MRCTF{We1cOm3_70_cyber_security}</p><hr><hr><hr><h1 id="wireshark-USB"><a href="#wireshark-USB" class="headerlink" title="wireshark USB"></a><strong>wireshark USB</strong></h1><hr><hr><hr><h1 id="python-SWPU2019-Network"><a href="#python-SWPU2019-Network" class="headerlink" title="python [SWPU2019]Network"></a><strong>python [SWPU2019]Network</strong></h1><hr><hr><hr><h1 id="python-GUET-CTF2019-虚假的压缩包"><a href="#python-GUET-CTF2019-虚假的压缩包" class="headerlink" title="python  [GUET-CTF2019]虚假的压缩包"></a><strong>python  [GUET-CTF2019]虚假的压缩包</strong></h1><hr><hr><hr><h1 id="wireshark-蜘蛛侠呀"><a href="#wireshark-蜘蛛侠呀" class="headerlink" title="wireshark 蜘蛛侠呀"></a><strong>wireshark 蜘蛛侠呀</strong></h1><hr><hr><hr><h1 id="wireshark-SUCTF2018-followme"><a href="#wireshark-SUCTF2018-followme" class="headerlink" title="wireshark[SUCTF2018]followme"></a><strong>wireshark[SUCTF2018]followme</strong></h1><hr><hr><hr><h1 id="RCTF2019-draw"><a href="#RCTF2019-draw" class="headerlink" title="[RCTF2019]draw"></a><strong>[RCTF2019]draw</strong></h1><p>打开得到下列代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cs pu lt 90 fd 500 rt 90 pd fd 100 rt 90 repeat 18[fd 5 rt 10] lt 135 fd 50 lt 135 pu bk 100 pd setcolor pick [ red orange yellow green blue violet ] repeat 18[fd 5 rt 10] rt 90 fd 60 rt 90 bk 30 rt 90 fd 60 pu lt 90 fd 100 pd rt 90 fd 50 bk 50 setcolor pick [ red orange yellow green blue violet ] lt 90 fd 50 rt 90 fd 50 pu fd 50 pd fd 25 bk 50 fd 25 rt 90 fd 50 pu setcolor pick [ red orange yellow green blue violet ] fd 100 rt 90 fd 30 rt 45 pd fd 50 bk 50 rt 90 fd 50 bk 100 fd 50 rt 45 pu fd 50 lt 90 pd fd 50 bk 50 rt 90 setcolor pick [ red orange yellow green blue violet ] fd 50 pu lt 90 fd 100 pd fd 50 rt 90 fd 25 bk 25 lt 90 bk 25 rt 90 fd 25 setcolor pick [ red orange yellow green blue violet ] pu fd 25 lt 90 bk 30 pd rt 90 fd 25 pu fd 25 lt 90 pd fd 50 bk 25 rt 90 fd 25 lt 90 fd 25 bk 50 pu bk 100 lt 90 setcolor pick [ red orange yellow green blue violet ] fd 100 pd rt 90 arc 360 20 pu rt 90 fd 50 pd arc 360 15 pu fd 15 setcolor pick [ red orange yellow green blue violet ] lt 90 pd bk 50 lt 90 fd 25 pu home bk 100 lt 90 fd 100 pd arc 360 20 pu home</span><br></pre></td></tr></table></figure><p><a href="https://www.calormen.com/jslogo/">在线解logo码</a>得到flag<br><img src="/2021/02/28/BUU7/10.png"><br>flag{RCTF_HeyLogo}</p><hr><hr><hr><h1 id="XMAN2018排位赛-通行证"><a href="#XMAN2018排位赛-通行证" class="headerlink" title="[XMAN2018排位赛]通行证"></a><strong>[XMAN2018排位赛]通行证</strong></h1><p>打开先base64解码<br><img src="/2021/02/28/BUU7/11.png"><br>这里卡了好久，怎么解不出来<br><img src="/2021/02/28/BUU7/12.png"><br>看了大佬们说解栅栏，每组七个，<br>找了好久发现是用栅栏给它加密<br>菜到解不出签到题<br><img src="/2021/02/28/BUU7/13.png"><br>最后得到flag<br><img src="/2021/02/28/BUU7/14.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xman&#123;oyay_now_you_get_it&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="今日小结"><a href="#今日小结" class="headerlink" title="今日小结"></a><strong>今日小结</strong></h1><ol><li>磁盘数据，恢复删除文件</li><li>PDF转换为了word</li><li>dtmf2num.exe</li><li>手机键盘密码</li><li>在线解logo码 </li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU6</title>
      <link href="2021/02/27/BUU6/"/>
      <url>2021/02/27/BUU6/</url>
      
        <content type="html"><![CDATA[<h1 id="SUCTF2018-single-dog"><a href="#SUCTF2018-single-dog" class="headerlink" title="[SUCTF2018]single dog"></a><strong>[SUCTF2018]single dog</strong></h1><p>binwalk分析发现隐藏文件，分离后得到txt文件<br><img src="/2021/02/27/BUU6/1.png"><br>aaencode解密得到flag<br><img src="/2021/02/27/BUU6/2.png"><br>flag{happy double eleven}</p><hr><hr><hr><h1 id="wireshark-V-amp-N2020-公开赛-拉胯的三条命令"><a href="#wireshark-V-amp-N2020-公开赛-拉胯的三条命令" class="headerlink" title="wireshark[V&amp;N2020 公开赛]拉胯的三条命令"></a><strong>wireshark[V&amp;N2020 公开赛]拉胯的三条命令</strong></h1><hr><hr><hr><h1 id="python-安洵杯-2019-吹着贝斯扫二维码"><a href="#python-安洵杯-2019-吹着贝斯扫二维码" class="headerlink" title="python[安洵杯 2019]吹着贝斯扫二维码"></a><strong>python[安洵杯 2019]吹着贝斯扫二维码</strong></h1><hr><hr><hr><h1 id="从娃娃抓起"><a href="#从娃娃抓起" class="headerlink" title="从娃娃抓起"></a><strong>从娃娃抓起</strong></h1><p>第一行为中文电码，第二行为五笔输入法<br><img src="/2021/02/27/BUU6/3.png"><br>解码得到<br><img src="/2021/02/27/BUU6/4.png"><br><img src="/2021/02/27/BUU6/5.png"><br>人工智能也要从娃娃抓起<br><img src="/2021/02/27/BUU6/6.png"><br>得到flag{3b4b5dccd2c008fe7e2664bd1bc19292}</p><hr><hr><hr><h1 id="小易的U盘"><a href="#小易的U盘" class="headerlink" title="小易的U盘"></a><strong>小易的U盘</strong></h1><p>打开压缩包发现这里有线索<br><img src="/2021/02/27/BUU6/7.png"><br><img src="/2021/02/27/BUU6/8.png"><br>这里不知道该怎么搞了，看了wp，要放入ida查看<br><img src="/2021/02/27/BUU6/9.png"></p><hr><hr><hr><h1 id="pythn-DDCTF2018"><a href="#pythn-DDCTF2018" class="headerlink" title="pythn[DDCTF2018]"></a><strong>pythn[DDCTF2018]</strong></h1><hr><hr><hr><h1 id="wireshark-ACTF新生赛2020-swp"><a href="#wireshark-ACTF新生赛2020-swp" class="headerlink" title="wireshark[ACTF新生赛2020]swp"></a><strong>wireshark[ACTF新生赛2020]swp</strong></h1><hr><hr><hr><h1 id="wireshark百里挑一"><a href="#wireshark百里挑一" class="headerlink" title="wireshark百里挑一"></a><strong>wireshark百里挑一</strong></h1><hr><hr><hr><h1 id="WUSTCTF2020-alison-likes-jojo"><a href="#WUSTCTF2020-alison-likes-jojo" class="headerlink" title="[WUSTCTF2020]alison_likes_jojo"></a><strong>[WUSTCTF2020]alison_likes_jojo</strong></h1><p>binwalk分析第一张图片发现有隐藏压缩包<br>使用命令提取出来<br><img src="/2021/02/27/BUU6/10.png"><br>用数字爆破得到密码888866，<br><img src="/2021/02/27/BUU6/11.png"><br>多次解base64，得到密码 <code>killerqueen</code><br>outguess得到flag<br><img src="/2021/02/27/BUU6/12.png"><br>wctf2020{pretty_girl_alison_likes_jojo}</p><hr><hr><hr><h1 id="GUET-CTF2019-zips"><a href="#GUET-CTF2019-zips" class="headerlink" title="[GUET-CTF2019]zips"></a><strong>[GUET-CTF2019]zips</strong></h1><p>打开压缩包需要输入密码，使用ARCHPR爆破，密码为：723456<br><img src="/2021/02/27/BUU6/13.png"><br>发现111.zip伪加密,利用winhex修改数据<br><img src="/2021/02/27/BUU6/14.png"><br> 查看setup.sh<br><img src="/2021/02/27/BUU6/15.png"><br> flag.zip为掩码爆破，因为时间戳和出题当时不太一样所以往前推，利用ARCHPR设置掩码15???.?? 掩码符号为**?**<br><img src="/2021/02/27/BUU6/16.png"><br>得到flag<br><img src="/2021/02/27/BUU6/17.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;fkjabPqnLawhvuikfhgzyffj&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="wireshark-安洵杯-2019-Attack"><a href="#wireshark-安洵杯-2019-Attack" class="headerlink" title="wireshark[安洵杯 2019]Attack"></a><strong>wireshark[安洵杯 2019]Attack</strong></h1><hr><hr><hr><h1 id="SUCTF-2019-Game"><a href="#SUCTF-2019-Game" class="headerlink" title="[SUCTF 2019]Game"></a><strong>[SUCTF 2019]Game</strong></h1><p> index.html中发现一串base32<br><img src="/2021/02/27/BUU6/18.png"><br><img src="/2021/02/27/BUU6/19.png"><br>并不是真的flag，但是这个后面有用，看到另外一张图，LSB发现一串base64<br><img src="/2021/02/27/BUU6/20.png"><br>看了wp，这串base64解码后头部是Salted，应该是AES或者3DES<br><img src="/2021/02/27/BUU6/21.png"><br>suctf{U_F0und_1t}</p><hr><hr><hr><h1 id="python-MRCTF2020-千层套路"><a href="#python-MRCTF2020-千层套路" class="headerlink" title="python[MRCTF2020]千层套路"></a><strong>python[MRCTF2020]千层套路</strong></h1><hr><hr><hr><h1 id="BJDCTF-2nd-开场曲"><a href="#BJDCTF-2nd-开场曲" class="headerlink" title="BJDCTF 2nd- -开场曲"></a><strong>BJDCTF 2nd- -开场曲</strong></h1><p><a href="https://blog.csdn.net/qq_42016346/article/details/105039640">大佬的wp</a></p><hr><hr><hr><h1 id="NPUCTF2020-签到"><a href="#NPUCTF2020-签到" class="headerlink" title="[NPUCTF2020]签到"></a><strong>[NPUCTF2020]签到</strong></h1><h1 id="本日小结"><a href="#本日小结" class="headerlink" title="本日小结"></a><strong>本日小结</strong></h1><ol><li>中文电码</li><li>五笔输入法</li><li>小易的U盘 ida</li><li>掩码爆破</li><li>头部是Salted，应该是AES或者3DES</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU5</title>
      <link href="2021/02/25/BUU5/"/>
      <url>2021/02/25/BUU5/</url>
      
        <content type="html"><![CDATA[<h1 id="MRCTF2020-你能看懂音符吗"><a href="#MRCTF2020-你能看懂音符吗" class="headerlink" title="[MRCTF2020]你能看懂音符吗"></a><strong>[MRCTF2020]你能看懂音符吗</strong></h1><p>打开发现并没有什么内容，搞不出来卡了wp，是word隐藏文字<br><img src="/2021/02/25/BUU5/1.png"><br>还有一种方法是查看document.xml<br><img src="/2021/02/25/BUU5/2.png"><br>去解音符得到flag<br><img src="/2021/02/25/BUU5/3.png"></p><hr><hr><hr><h1 id="wireshark-john-in-the-middle"><a href="#wireshark-john-in-the-middle" class="headerlink" title="wireshark john-in-the-middle"></a><strong>wireshark john-in-the-middle</strong></h1><hr><hr><hr><h1 id="GUET-CTF2019-KO"><a href="#GUET-CTF2019-KO" class="headerlink" title="[GUET-CTF2019]KO"></a><strong>[GUET-CTF2019]KO</strong></h1><p>ook编码，白给</p><hr><hr><hr><h1 id="HBNIS2018-caesar"><a href="#HBNIS2018-caesar" class="headerlink" title="[HBNIS2018]caesar"></a><strong>[HBNIS2018]caesar</strong></h1><p>凯撒白给</p><hr><hr><hr><h1 id="MRCTF2020-ezmisc"><a href="#MRCTF2020-ezmisc" class="headerlink" title="[MRCTF2020]ezmisc"></a><strong>[MRCTF2020]ezmisc</strong></h1><p>虚拟机中报错，修改大小得到flag<br><img src="/2021/02/25/BUU5/4.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1ts_vEryyyyyy_ez!&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="HBNIS2018-低个头"><a href="#HBNIS2018-低个头" class="headerlink" title="[HBNIS2018]低个头"></a><strong>[HBNIS2018]低个头</strong></h1><p>键盘密码CTF<br><img src="/2021/02/25/BUU5/5.png"></p><hr><hr><hr><h1 id="python-zip"><a href="#python-zip" class="headerlink" title="python zip"></a><strong>python zip</strong></h1><p><a href="https://blog.csdn.net/weixin_45897326/article/details/104021695">大佬的wp</a></p><hr><hr><hr><h1 id="python-GXYCTF2019-SXMgdGhpcyBiYXNlPw"><a href="#python-GXYCTF2019-SXMgdGhpcyBiYXNlPw" class="headerlink" title="python[GXYCTF2019]SXMgdGhpcyBiYXNlPw=="></a><strong>python[GXYCTF2019]SXMgdGhpcyBiYXNlPw==</strong></h1><p><a href="https://www.yuque.com/jxswcy/buuoj-wp/ltyguh">wp地址1</a><br><a href="https://www.pythonf.cn/read/156745">wp地址2</a></p><hr><hr><hr><h1 id="ACTF新生赛2020-NTFS数据流"><a href="#ACTF新生赛2020-NTFS数据流" class="headerlink" title="[ACTF新生赛2020]NTFS数据流"></a><strong>[ACTF新生赛2020]NTFS数据流</strong></h1><p>放入ntfs扫描得到flag<br><img src="/2021/02/25/BUU5/6.png"></p><hr><hr><hr><h1 id="我吃三明治"><a href="#我吃三明治" class="headerlink" title="我吃三明治"></a><strong>我吃三明治</strong></h1><p>binwalk分析发现是两个jpg文件拼接而成，<br>两个图片中没有发现内容，在拼接处发现了base32<br><img src="/2021/02/25/BUU5/7.png"><br>解base32得到flag<br><img src="/2021/02/25/BUU5/8.png"><br>flag{6f1797d4080b29b64da5897780463e30}</p><hr><hr><hr><h1 id="RoarCTF2019-黄金6年"><a href="#RoarCTF2019-黄金6年" class="headerlink" title="[RoarCTF2019]黄金6年"></a><strong>[RoarCTF2019]黄金6年</strong></h1><p>这是个长见识的题，视频里有四个二维码，最后一个最难发现，要把屏幕亮度调到最大<br><img src="/2021/02/25/BUU5/9.png"><br>在视频十六进制尾端发现base64，<br><img src="/2021/02/25/BUU5/10.png"><br>转出来base64发现是一个rar压缩包，放入16进制编译器怎么保存都打不开，<br>看了wp，知道要转出来16进制<br><img src="/2021/02/25/BUU5/11.png"><br>四个二维码内容拼起来是rar压缩包的密码。<br><img src="/2021/02/25/BUU5/12.png"></p><hr><hr><hr><h1 id="间谍启示录"><a href="#间谍启示录" class="headerlink" title="间谍启示录"></a><strong>间谍启示录</strong></h1><p>foremost分离iso文件后得到一个rar压缩包<br>wine flag.exe运行压缩包中的flag.exe文件dedaoflag</p><h1 id="本日小结"><a href="#本日小结" class="headerlink" title="本日小结"></a><strong>本日小结</strong></h1><ol><li>word隐藏文字</li><li>键盘密码</li><li>NTFS数据流</li><li>Kinovea</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU4</title>
      <link href="2021/02/24/BUU4/"/>
      <url>2021/02/24/BUU4/</url>
      
        <content type="html"><![CDATA[<h1 id="啊-SWPU2019-伟大的侦探"><a href="#啊-SWPU2019-伟大的侦探" class="headerlink" title="啊[SWPU2019]伟大的侦探"></a><strong>啊[SWPU2019]伟大的侦探</strong></h1><p>01editor 选择 EBCDIC编码得到压缩包的密码</p><p><img src="/2021/02/24/BUU4/1.png"><br>这里用到的是福尔摩斯里面的跳舞的小人加密</p><p><img src="/2021/02/24/BUU4/2.png"><br>对照表是这样的<br><img src="/2021/02/24/BUU4/3.png"><br>结果就是：<br>iloveholmesandwllm </p><hr><hr><hr><h1 id="HBNIS2018-来题中等的吧"><a href="#HBNIS2018-来题中等的吧" class="headerlink" title="[HBNIS2018]来题中等的吧"></a><strong>[HBNIS2018]来题中等的吧</strong></h1><p>打开如图，起初以为是一个条形码，媒介出来，应该是摩斯密码<br><img src="/2021/02/24/BUU4/4.png"><br>解莫斯密码得到flag<br><img src="/2021/02/24/BUU4/5.png"><br>flag{alphalab}</p><hr><hr><hr><h1 id="WUSTCTF2020-find-me"><a href="#WUSTCTF2020-find-me" class="headerlink" title="[WUSTCTF2020]find_me"></a><strong>[WUSTCTF2020]find_me</strong></h1><p>exiftool 发现盲文<br><img src="/2021/02/24/BUU4/6.png"><br>在线解密得到flag<br><img src="/2021/02/24/BUU4/7.png"><br>wctf2020{y$0$u_f$1$n$d$_M$e$e$e$e$e}</p><hr><hr><hr><h1 id="wireshark黑客帝国"><a href="#wireshark黑客帝国" class="headerlink" title="wireshark黑客帝国"></a><strong>wireshark黑客帝国</strong></h1><hr><hr><hr><h1 id="啊python弱口令"><a href="#啊python弱口令" class="headerlink" title="啊python弱口令"></a><strong>啊python弱口令</strong></h1><p><a href="https://blog.csdn.net/mochu7777777/article/details/109404302">大佬的wp</a></p><hr><hr><hr><h1 id="SWPU2019-你有没有好好看网课"><a href="#SWPU2019-你有没有好好看网课" class="headerlink" title="[SWPU2019]你有没有好好看网课?"></a><strong>[SWPU2019]你有没有好好看网课?</strong></h1><p>题目压缩包里有两个压缩包<br><img src="/2021/02/24/BUU4/8.png"><br>根据注释爆破flag3<br><img src="/2021/02/24/BUU4/9.png"><br>打开docx内容如下<br><img src="/2021/02/24/BUU4/10.png"><br>找到第5.66s是下图敲击吗<br><img src="/2021/02/24/BUU4/11.png"><br>第7.36s是下图base64编码<br><img src="/2021/02/24/BUU4/12.png"><br>解敲击码<br><img src="/2021/02/24/BUU4/13.png"><br>解base64<br><img src="/2021/02/24/BUU4/14.png"><br>两个密码组合起来为flag2压缩包的密码<br>打开后将图片放入winhex，flag在十六进制末端<br><img src="/2021/02/24/BUU4/15.png"></p><hr><hr><hr><h1 id="今日小结"><a href="#今日小结" class="headerlink" title="今日小结"></a><strong>今日小结</strong></h1><ol><li>01editor 选择 EBCDIC编码得到压缩包的密码</li><li>跳舞的小人加密</li><li>盲文</li><li>Kinovea</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NEWSCTF</title>
      <link href="2021/02/23/NEWSCTF/"/>
      <url>2021/02/23/NEWSCTF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU3</title>
      <link href="2021/02/22/BUU3/"/>
      <url>2021/02/22/BUU3/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF-2nd-EasyBaBa"><a href="#BJDCTF-2nd-EasyBaBa" class="headerlink" title="[BJDCTF 2nd]EasyBaBa"></a><strong>[BJDCTF 2nd]EasyBaBa</strong></h1><p>binwalk分析，foremost分离<br>看视频图侦，扫描二维码</p><h1 id="BJDCTF2020-一叶障目"><a href="#BJDCTF2020-一叶障目" class="headerlink" title="[BJDCTF2020]一叶障目"></a><strong>[BJDCTF2020]一叶障目</strong></h1><p>binwalk未发现隐藏文件，zsteg发现异常，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF2$ zsteg &#39;&#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF2&#x2F;1.png&#39; </span><br><span class="line">extradata:imagedata .. </span><br><span class="line"></span><br><span class="line">    00000000: 00 5b 4d 33 ff 5d 4f 35  ff 60 52 38 ff 5f 53 39  |.[M3.]O5.&#96;R8._S9|</span><br><span class="line">    00000010: ff 5f 53 39 ff 5b 4f 35  ff 57 4b 31 ff 58 4e 35  |._S9.[O5.WK1.XN5|</span><br><span class="line">    00000020: ff 5d 53 3a ff 5c 52 39  ff 55 4b 32 ff 54 48 30  |.]S:.\R9.UK2.TH0|</span><br><span class="line">    00000030: ff 5a 4e 36 ff 5d 51 39  ff 5b 4f 37 ff 56 4a 34  |.ZN6.]Q9.[O7.VJ4|</span><br><span class="line">    00000040: ff 57 4b 35 ff 59 4d 37  ff 5b 4f 39 ff 5a 4e 38  |.WK5.YM7.[O9.ZN8|</span><br><span class="line">    00000050: ff 59 4d 37 ff 58 4c 36  ff 58 4c 36 ff 54 49 33  |.YM7.XL6.XL6.TI3|</span><br><span class="line">    00000060: ff 54 49 33 ff 4e 43 2d  ff 49 3e 28 ff 50 45 2f  |.TI3.NC-.I&gt;(.PE&#x2F;|</span><br><span class="line">    00000070: ff 58 4d 37 ff 59 4e 38  ff 59 4e 38 ff 52 47 31  |.XM7.YN8.YN8.RG1|</span><br><span class="line">    00000080: ff 58 4d 37 ff 59 4e 38  ff 5d 52 3c ff 63 58 42  |.XM7.YN8.]R&lt;.cXB|</span><br><span class="line">    00000090: ff 5f 54 3e ff 57 4c 36  ff 57 4c 36 ff 5a 50 37  |._T&gt;.WL6.WL6.ZP7|</span><br><span class="line">    000000a0: ff 5e 54 3b ff 5e 53 3d  ff 59 4e 38 ff 55 4a 34  |.^T;.^S&#x3D;.YN8.UJ4|</span><br><span class="line">    000000b0: ff 55 4a 34 ff 55 4a 34  ff 53 48 32 ff 55 4a 34  |.UJ4.UJ4.SH2.UJ4|</span><br><span class="line">    000000c0: ff 5a 4f 39 ff 57 4c 36  ff 57 4c 36 ff 5b 50 3c  |.ZO9.WL6.WL6.[P&lt;|</span><br><span class="line">    000000d0: ff 52 47 33 ff 47 3c 28  ff 48 3d 29 ff 58 4c 36  |.RG3.G&lt;(.H&#x3D;).XL6|</span><br><span class="line">    000000e0: ff 5b 4f 39 ff 59 4d 37  ff 52 46 30 ff 52 46 30  |.[O9.YM7.RF0.RF0|</span><br><span class="line">    000000f0: ff 5a 4e 38 ff 60 54 3e  ff 5f 53 3d ff 54 48 32  |.ZN8.&#96;T&gt;._S&#x3D;.TH2|</span><br><span class="line">b1,r,lsb,xy         .. text: &quot;wrH:0?J3&quot;</span><br><span class="line">b1,g,lsb,xy         .. text: &quot;~oWn0)cw&quot;</span><br><span class="line">b1,rgb,msb,xy       .. text: &quot;m[UR+UR+&quot;</span><br><span class="line">b1,bgr,msb,xy       .. text: &quot;qdl&#39;#7r#)&quot;</span><br><span class="line">b1,abgr,msb,xy      .. text: &quot;&#x3D;&#x3D;3sywW[[[&quot;</span><br><span class="line">b2,r,lsb,xy         .. text: &quot;YI&#x2F;XMO\t#&quot;</span><br><span class="line">b2,b,lsb,xy         .. text: &quot;1*v;B;GU&quot;</span><br><span class="line">b2,rgba,lsb,xy      .. text: &quot;??C?CCCC&quot;</span><br><span class="line">b3,b,msb,xy         .. text: &quot;53?\&quot;gg6c&quot;</span><br><span class="line">b4,rgb,lsb,xy       .. text: &quot;2C$ezyRIh&quot;</span><br><span class="line">b4,bgr,lsb,xy       .. text: &quot;B4#uizBXi&quot;</span><br><span class="line">b4,rgba,lsb,xy      .. text: &quot;O&#x2F;r_r_r_&quot;</span><br></pre></td></tr></table></figure><p>放入winhex修改行高得到flag(第一次修改的太少flag没有出来)</p><hr><hr><hr><h1 id="穿越时空的思念"><a href="#穿越时空的思念" class="headerlink" title="穿越时空的思念"></a><strong>穿越时空的思念</strong></h1><p>下载mp3文件发现有摩斯密码，<br>放入audacity<br><img src="/2021/02/22/BUU3/1.png"><br>解出摩斯密码得到flag</p><hr><hr><hr><h1 id="BJDCTF2020-鸡你太美"><a href="#BJDCTF2020-鸡你太美" class="headerlink" title="[BJDCTF2020]鸡你太美"></a><strong>[BJDCTF2020]鸡你太美</strong></h1><p>补齐gif文件头得到flag</p><hr><hr><hr><h1 id="BJDCTF2020-just-a-rar"><a href="#BJDCTF2020-just-a-rar" class="headerlink" title="[BJDCTF2020]just_a_rar"></a><strong>[BJDCTF2020]just_a_rar</strong></h1><p>暴力破解rar密码，得到flag.jpg<br>放入虚拟机中使用exiftool得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF2$ exiftool &#39;&#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF2&#x2F;flag.jpg&#39; </span><br><span class="line">ExifTool Version Number         : 12.16</span><br><span class="line">File Name                       : flag.jpg</span><br><span class="line">Directory                       : &#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF2</span><br><span class="line">File Size                       : 102 KiB</span><br><span class="line">File Modification Date&#x2F;Time     : 2016:07:27 09:40:10+08:00</span><br><span class="line">File Access Date&#x2F;Time           : 2021:02:22 13:35:55+08:00</span><br><span class="line">File Inode Change Date&#x2F;Time     : 2021:02:22 13:35:42+08:00</span><br><span class="line">File Permissions                : rw-------</span><br><span class="line">File Type                       : JPEG</span><br><span class="line">File Type Extension             : jpg</span><br><span class="line">MIME Type                       : image&#x2F;jpeg</span><br><span class="line">JFIF Version                    : 1.01</span><br><span class="line">Resolution Unit                 : inches</span><br><span class="line">X Resolution                    : 1</span><br><span class="line">Y Resolution                    : 1</span><br><span class="line">Exif Byte Order                 : Big-endian (Motorola, MM)</span><br><span class="line">XP Comment                      : flag&#123;Wadf_123&#125;</span><br><span class="line">Padding                         : (Binary data 2060 bytes, use -b option to extract)</span><br><span class="line">Image Width                     : 580</span><br><span class="line">Image Height                    : 868</span><br><span class="line">Encoding Process                : Baseline DCT, Huffman coding</span><br><span class="line">Bits Per Sample                 : 8</span><br><span class="line">Color Components                : 3</span><br><span class="line">Y Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)</span><br><span class="line">Image Size                      : 580x868</span><br><span class="line">Megapixels                      : 0.503</span><br></pre></td></tr></table></figure><p>flag{Wadf_123}</p><hr><hr><hr><h1 id="python-BJDCTF-2nd-Real-EasyBaBa"><a href="#python-BJDCTF-2nd-Real-EasyBaBa" class="headerlink" title="python[BJDCTF 2nd]Real_EasyBaBa"></a><strong>python[BJDCTF 2nd]Real_EasyBaBa</strong></h1><p><img src="/2021/02/22/BUU3/3.png"><br><img src="/2021/02/22/BUU3/2.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">length &#x3D; 58</span><br><span class="line">img &#x3D; Image.new(&#39;RGB&#39;, (length*5, length*5))</span><br><span class="line">#黑点为1白点为0</span><br><span class="line">data &#x3D; &quotquot;</span><br><span class="line"></span><br><span class="line">for x in range(length):</span><br><span class="line">    for y in range(length):</span><br><span class="line">        if data[x*length+y] &#x3D;&#x3D; &#39;1&#39;:</span><br><span class="line">            for xx in range(x*5, x*5+5):</span><br><span class="line">                for yy in range(y*5, y*5+5):</span><br><span class="line">                    img.putpixel([xx, yy], (0,0,0))</span><br><span class="line">        else:</span><br><span class="line">            for xx in range(x*5, x*5+5):</span><br><span class="line">                for yy in range(y*5, y*5+5):</span><br><span class="line">                    img.putpixel([xx, yy], (255,255,255))</span><br><span class="line">img.save(&#39;out.png&#39;)</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="GKCTF2020-Pokémon"><a href="#GKCTF2020-Pokémon" class="headerlink" title="[GKCTF2020]Pokémon"></a><strong>[GKCTF2020]Pokémon</strong></h1><p>打游戏拿到flag</p><hr><hr><hr><h1 id="ACTF新生赛2020-outguess"><a href="#ACTF新生赛2020-outguess" class="headerlink" title="[ACTF新生赛2020]outguess"></a><strong>[ACTF新生赛2020]outguess</strong></h1><p>下载压缩包，outguess的密码在属性里<br><img src="/2021/02/22/BUU3/4.png"><br>outguess得到flag<br><img src="/2021/02/22/BUU3/5.png"></p><hr><hr><hr><h1 id="BJDCTF2020-纳尼"><a href="#BJDCTF2020-纳尼" class="headerlink" title="[BJDCTF2020]纳尼"></a><strong>[BJDCTF2020]纳尼</strong></h1><p>补全文件头发现gif是base64的动态图<br>提取出字符解密得到flag<br><img src="/2021/02/22/BUU3/6.png"></p><hr><hr><hr><h1 id="SWPU2019-我有一只马里奥"><a href="#SWPU2019-我有一只马里奥" class="headerlink" title="[SWPU2019]我有一只马里奥"></a><strong>[SWPU2019]我有一只马里奥</strong></h1><p>点击文件出来一个1.txt，没有用<br><img src="/2021/02/22/BUU3/7.png"><br>使用360压缩打开发现了flag<br><img src="/2021/02/22/BUU3/8.png"><br>flag{ddg_is_cute}</p><hr><hr><hr><h1 id="谁赢了比赛？"><a href="#谁赢了比赛？" class="headerlink" title="谁赢了比赛？"></a><strong>谁赢了比赛？</strong></h1><p>打开是一个棋谱<br><img src="/2021/02/22/BUU3/9.png"><br>binwalk分离出rar压缩包flag.txt没用<br><img src="/2021/02/22/BUU3/10.png"><br>爆破得到压缩包密码，用stegsolve逐帧浏览<br><img src="/2021/02/22/BUU3/11.jpg"><br>将此帧保存，再放入stegsolve<br><img src="/2021/02/22/BUU3/12.png"><br>得到flag</p><hr><hr><hr><h1 id="python-GXYCTF2019-gakki"><a href="#python-GXYCTF2019-gakki" class="headerlink" title="python[GXYCTF2019]gakki"></a><strong>python[GXYCTF2019]gakki</strong></h1><p>打开是一张美女，<br><img src="/2021/02/22/BUU3/13.png"><br>binwalk分析发现有隐藏rar，将其分离出来<br><img src="/2021/02/22/BUU3/14.png"><br>直接爆破压缩包密码，得到flag.txt<br><img src="/2021/02/22/BUU3/15.png"><br><a href="https://blog.csdn.net/mochu7777777/article/details/109377328">大佬的wp</a>说是字频分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">#Author: mochu7</span><br><span class="line">alphabet &#x3D; &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- &#x3D;\\&#123;\\&#125;[]&quot;</span><br><span class="line">strings &#x3D; open(&#39;.&#x2F;flag.txt&#39;).read()</span><br><span class="line"></span><br><span class="line">result &#x3D; &#123;&#125;</span><br><span class="line">for i in alphabet:</span><br><span class="line">counts &#x3D; strings.count(i)</span><br><span class="line">i &#x3D; &#39;&#123;0&#125;&#39;.format(i)</span><br><span class="line">result[i] &#x3D; counts</span><br><span class="line"></span><br><span class="line">res &#x3D; sorted(result.items(),key&#x3D;lambda item:item[1],reverse&#x3D;True)</span><br><span class="line">for data in res:</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">for i in res:</span><br><span class="line">flag &#x3D; str(i[0])</span><br><span class="line">print(flag[0],end&#x3D;&quot;&quot;)</span><br></pre></td></tr></table></figure><p>flag{gaki_IsMyw1fe}</p><h1 id="Mysterious"><a href="#Mysterious" class="headerlink" title="Mysterious"></a><strong>Mysterious</strong></h1><p><strong>不会</strong></p><hr><hr><hr><h1 id="python-BJDCTF-2nd-TARGZ-y1ng"><a href="#python-BJDCTF-2nd-TARGZ-y1ng" class="headerlink" title="python[BJDCTF 2nd]TARGZ-y1ng"></a><strong>python[BJDCTF 2nd]TARGZ-y1ng</strong></h1><p>依然是<a href="https://blog.csdn.net/mochu7777777/article/details/109360870">大佬的wp</a>,<br>解密300层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">name &#x3D; &#39;hW1ES89jF&#39;</span><br><span class="line">while True:</span><br><span class="line">    fz &#x3D; zipfile.ZipFile(name + &#39;.tar.gz&#39;, &#39;r&#39;)</span><br><span class="line">    fz.extractall(pwd&#x3D;bytes(name, &#39;utf-8&#39;))</span><br><span class="line">    name &#x3D; fz.filelist[0].filename[0:9]</span><br><span class="line">    fz.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="HBNIS2018-excel破解"><a href="#HBNIS2018-excel破解" class="headerlink" title="[HBNIS2018]excel破解"></a><strong>[HBNIS2018]excel破解</strong></h1><p>打开后发现是加密的xls文件，<br><img src="/2021/02/22/BUU3/16.png"><br>孙坚有点懵逼，winhex搜索发现flag能直接搜到<br><img src="/2021/02/22/BUU3/17.png"></p><hr><hr><hr><h1 id="python-ACTF新生赛2020-base64隐写"><a href="#python-ACTF新生赛2020-base64隐写" class="headerlink" title="python[ACTF新生赛2020]base64隐写"></a><strong>python[ACTF新生赛2020]base64隐写</strong></h1><p><a href="https://blog.csdn.net/mochu7777777/article/details/109428576">wp</a></p><hr><hr><hr><h1 id="python喵喵喵"><a href="#python喵喵喵" class="headerlink" title="python喵喵喵"></a><strong>python喵喵喵</strong></h1><blockquote><p>知识点：<br>LSB隐写，修改文件高度，ntfs交换数据流隐写，反编译，python<br>打开压缩包得到一个可爱小猫眯<br><img src="/2021/02/22/BUU3/18.png"><br>分析之后得知为LSB隐写<br><img src="/2021/02/22/BUU3/19.png"><br>将图片保存出来，修改二维码的高度，得到下图<br><img src="/2021/02/22/BUU3/20.png"><br>打开是一个压缩包，里面又一个没用的flag.txt<br><img src="/2021/02/22/BUU3/21.png"><br>这里看到了<a href="https://blog.csdn.net/destiny1507/article/details/101997730">大佬的博客</a>知道为ntfs隐写<br>将得到的反编译文件反编译出来</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"> </span><br><span class="line">def encode():</span><br><span class="line">    flag &#x3D; &#39;*************&#39;</span><br><span class="line">    ciphertext &#x3D; []</span><br><span class="line">    for i in range(len(flag)):</span><br><span class="line">        s &#x3D; chr(i ^ ord(flag[i]))</span><br><span class="line">        if i % 2 &#x3D;&#x3D; 0:</span><br><span class="line">            s &#x3D; ord(s) + 10</span><br><span class="line">        else:</span><br><span class="line">            s &#x3D; ord(s) - 10</span><br><span class="line">        ciphertext.append(str(s))</span><br><span class="line">    </span><br><span class="line">    return ciphertext[::-1]  #倒序一遍</span><br><span class="line"> </span><br><span class="line">ciphertext &#x3D; [</span><br><span class="line">    &#39;96&#39;,</span><br><span class="line">    &#39;65&#39;,</span><br><span class="line">    &#39;93&#39;,</span><br><span class="line">    &#39;123&#39;,</span><br><span class="line">    &#39;91&#39;,</span><br><span class="line">    &#39;97&#39;,</span><br><span class="line">    &#39;22&#39;,</span><br><span class="line">    &#39;93&#39;,</span><br><span class="line">    &#39;70&#39;,</span><br><span class="line">    &#39;102&#39;,</span><br><span class="line">    &#39;94&#39;,</span><br><span class="line">    &#39;132&#39;,</span><br><span class="line">    &#39;46&#39;,</span><br><span class="line">    &#39;112&#39;,</span><br><span class="line">    &#39;64&#39;,</span><br><span class="line">    &#39;97&#39;,</span><br><span class="line">    &#39;88&#39;,</span><br><span class="line">    &#39;80&#39;,</span><br><span class="line">    &#39;82&#39;,</span><br><span class="line">    &#39;137&#39;,</span><br><span class="line">    &#39;90&#39;,</span><br><span class="line">    &#39;109&#39;,</span><br><span class="line">    &#39;99&#39;,</span><br><span class="line">    &#39;112&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"> </span><br><span class="line">ciphertext &#x3D; [&#39;96&#39;,&#39;65&#39;,&#39;93&#39;,&#39;123&#39;,&#39;91&#39;,&#39;97&#39;,&#39;22&#39;, &#39;93&#39;,&#39;70&#39;,&#39;102&#39;,&#39;94&#39;,&#39;132&#39;,&#39;46&#39;,&#39;112&#39;,&#39;64&#39;,&#39;97&#39;,&#39;88&#39;,&#39;80&#39;,&#39;82&#39;,&#39;137&#39;,&#39;90&#39;,&#39;109&#39;,&#39;99&#39;,&#39;112&#39;]</span><br><span class="line">ciphertext &#x3D; ciphertext[::-1]</span><br><span class="line"> </span><br><span class="line">def decode():</span><br><span class="line">    code &#x3D; &#39;&#39;</span><br><span class="line">    for i in range(24):</span><br><span class="line">        if(i%2 &#x3D;&#x3D; 0):</span><br><span class="line">            a &#x3D; int(ciphertext[i]) - 10</span><br><span class="line">        else:</span><br><span class="line">            a &#x3D; int(ciphertext[i]) + 10</span><br><span class="line">        a &#x3D; i ^ a</span><br><span class="line">        code &#x3D; code + chr(a)</span><br><span class="line">    print(code)</span><br><span class="line">    </span><br><span class="line">decode()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ACTF-Junior-2021</title>
      <link href="2021/02/22/ACTF-Junior-2021/"/>
      <url>2021/02/22/ACTF-Junior-2021/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU2</title>
      <link href="2021/02/21/BUU2/"/>
      <url>2021/02/21/BUU2/</url>
      
        <content type="html"><![CDATA[<h1 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a><strong>刷新过的图片</strong></h1><p>由题目联想到F5隐写<br><img src="/2021/02/21/BUU2/1.png"><br>得到压缩包，发开发现flag<br><img src="/2021/02/21/BUU2/2.png"><br>flag{96efd0a2037d06f34199e921079778ee}</p><hr><hr><h1 id="snake"><a href="#snake" class="headerlink" title="snake"></a><strong>snake</strong></h1><p>压缩包中是一个jpg文件，binwalk发现有隐藏文件，foremost分解后得到一个压缩包<br><img src="/2021/02/21/BUU2/3.png"><br>记事本打开key解码base64得到一句话<br><img src="/2021/02/21/BUU2/4.png"><br>看了下大佬的博客知道了Serpent加密算法，<br>百度搜索Nicki Minaj，找到了What is Nicki Minaj’s favorite song that refers to snakes?</p><p><img src="/2021/02/21/BUU2/5.png"><br>去Serpent解密网站得到flag<br><img src="/2021/02/21/BUU2/6.png"></p><p>CTF{who_knew_serpent_cipher_existed}</p><hr><hr><h1 id="BJDCTF-2nd-圣火昭昭-y1ng"><a href="#BJDCTF-2nd-圣火昭昭-y1ng" class="headerlink" title="[BJDCTF 2nd]圣火昭昭-y1ng"></a><strong>[BJDCTF 2nd]圣火昭昭-y1ng</strong></h1><p><img src="/2021/02/21/BUU2/9.png"><br>题目说全靠猜，联想到了outguess</p><p>看了大佬博客发现了exiftool工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF$ exiftool &#39;&#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF&#x2F;sheng_huo_zhao_zhao.jpg&#39; </span><br><span class="line">ExifTool Version Number         : 12.16</span><br><span class="line">File Name                       : sheng_huo_zhao_zhao.jpg</span><br><span class="line">Directory                       : &#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF</span><br><span class="line">File Size                       : 22 KiB</span><br><span class="line">File Modification Date&#x2F;Time     : 2020:03:12 16:13:37+08:00</span><br><span class="line">File Access Date&#x2F;Time           : 2021:02:21 11:10:55+08:00</span><br><span class="line">File Inode Change Date&#x2F;Time     : 2021:02:21 11:10:47+08:00</span><br><span class="line">File Permissions                : rw-------</span><br><span class="line">File Type                       : JPEG</span><br><span class="line">File Type Extension             : jpg</span><br><span class="line">MIME Type                       : image&#x2F;jpeg</span><br><span class="line">JFIF Version                    : 1.01</span><br><span class="line">Resolution Unit                 : inches</span><br><span class="line">X Resolution                    : 96</span><br><span class="line">Y Resolution                    : 96</span><br><span class="line">Exif Byte Order                 : Big-endian (Motorola, MM)</span><br><span class="line">XP Comment                      : 新佛曰：諸壽隸僧壽降吽壽諸壽陀壽摩隸僧缽薩願心壽咤壽囉寂壽闍諸壽哆壽慧壽聞壽色吽愍壽所壽蜜如</span><br><span class="line">Padding                         : (Binary data 2060 bytes, use -b option to extract)</span><br><span class="line">Image Width                     : 238</span><br><span class="line">Image Height                    : 316</span><br><span class="line">Encoding Process                : Baseline DCT, Huffman coding</span><br><span class="line">Bits Per Sample                 : 8</span><br><span class="line">Color Components                : 3</span><br><span class="line">Y Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)</span><br><span class="line">Image Size                      : 238x316</span><br><span class="line">Megapixels                      : 0.075</span><br></pre></td></tr></table></figure><p>其实信息在属性中<br><img src="/2021/02/21/BUU2/7.png"><br>解新佛曰得到密码<br><img src="/2021/02/21/BUU2/8.png"><br>outguess得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF$ outguess -k gemlove -r &#39;&#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF&#x2F;sheng_huo_zhao_zhao.jpg&#39;  flag.txt</span><br><span class="line">Reading &#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF&#x2F;sheng_huo_zhao_zhao.jpg....</span><br><span class="line">Extracting usable bits:   16072 bits</span><br><span class="line">Steg retrieve: seed: 217, len: 35</span><br></pre></td></tr></table></figure><p>BJD{wdnmd_misc_1s_so_Fuck1ng_e@sy}</p><hr><hr><h1 id="梅花香之苦寒来"><a href="#梅花香之苦寒来" class="headerlink" title="梅花香之苦寒来"></a><strong>梅花香之苦寒来</strong></h1><p>在winhex中发现尾端有很长的16进制数据<br><img src="/2021/02/21/BUU2/10.png"><br>将这些数据转化，得到一系列坐标，<br><img src="/2021/02/21/BUU2/11.png"><br>这里学到了新的命令gnuplot，将这些坐标转换格式然后打印 <strong>去掉（），，变空格</strong><br><img src="/2021/02/21/BUU2/12.png"><br>扫描得到flag<br>flag{40fc0a979f759c8892f4dc045e28b820}</p><hr><hr><h1 id="wireshark菜刀666"><a href="#wireshark菜刀666" class="headerlink" title="wireshark菜刀666"></a><strong>wireshark菜刀666</strong></h1><hr><hr><h1 id="wireshark被偷走的文件"><a href="#wireshark被偷走的文件" class="headerlink" title="wireshark被偷走的文件"></a><strong>wireshark被偷走的文件</strong></h1><hr><hr><h1 id="BJDCTF2020-认真你就输了"><a href="#BJDCTF2020-认真你就输了" class="headerlink" title="[BJDCTF2020]认真你就输了"></a><strong>[BJDCTF2020]认真你就输了</strong></h1><p>将下载的xls后缀改为zip，压缩包内搜索flag<br><img src="/2021/02/21/BUU2/13.png"><br>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;M9eVfi2Pcs#&#125;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="GXYCTF2019-佛系青年"><a href="#GXYCTF2019-佛系青年" class="headerlink" title="[GXYCTF2019]佛系青年"></a><strong>[GXYCTF2019]佛系青年</strong></h1><p>压缩包伪加密，得到fo.txt，解佛曰得到flag</p><hr><hr><h1 id="BJDCTF2020-藏藏藏"><a href="#BJDCTF2020-藏藏藏" class="headerlink" title="[BJDCTF2020]藏藏藏"></a><strong>[BJDCTF2020]藏藏藏</strong></h1><p>binwalk查看有zip压缩包，foremost分解得到zip<br>打开zip发现一个二维码，扫描二维码得到flag<br>flag{you are the best!}</p><hr><hr><h1 id="wireshark秘密文件"><a href="#wireshark秘密文件" class="headerlink" title="wireshark秘密文件"></a><strong>wireshark秘密文件</strong></h1><hr><hr><h1 id="BJDCTF2020-你猜我是个啥"><a href="#BJDCTF2020-你猜我是个啥" class="headerlink" title="[BJDCTF2020]你猜我是个啥"></a><strong>[BJDCTF2020]你猜我是个啥</strong></h1><p>zip压缩包无法打开，放入winhex发现是一个png，<br>改为png是一个二维码，扫描二维码，提示flag不在那，<br>发现flag在十六进制末尾<br>flag{i_am_fl@g}</p><hr><hr><h1 id="SWPU2019-神奇的二维码"><a href="#SWPU2019-神奇的二维码" class="headerlink" title="[SWPU2019]神奇的二维码"></a><strong>[SWPU2019]神奇的二维码</strong></h1><p>扫描二维码啥也没有，binwalk分析发现有隐藏RAR文件，<br>使用foremost未分解出来，使用binwalk -e ，得到四个RAR文件<br><img src="/2021/02/21/BUU2/14.png"><br>打开第二个压缩包得到第一个压缩包的密码，<br><img src="/2021/02/21/BUU2/15.png"><br>但是flag并不在第一个压缩包中，<br>这里第三个压缩包和第四个压缩包在虚拟机里内容一样，但是复制到主机上最后一个是一个mp3文件，<br>连续解base64得到第四个压缩包的密码<br><img src="/2021/02/21/BUU2/16.png"><br>打开是一个摩斯密码，解摩斯密码得到flag<br><img src="/2021/02/21/BUU2/17.png"><br>swpuctf{morseisveryveryeasy} </p><hr><hr><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h1><ol><li>F5隐写</li><li>Serpent加密算法</li><li>exiftool工具</li><li>outguess隐写</li><li>gnuplot命令</li><li>binwalk得到的文件foremost没有得到，RAR在虚拟机与主机内容不同。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界2</title>
      <link href="2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/"/>
      <url>2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/</url>
      
        <content type="html"><![CDATA[<h1 id="MISCall"><a href="#MISCall" class="headerlink" title="MISCall"></a><strong>MISCall</strong></h1><blockquote><p>原理及工具</p></blockquote><p><strong>原理</strong>：git信息泄露</p><p><strong>git官网资料</strong>：<a href="https://www.git-scm.com/book/zh/v2">https://www.git-scm.com/book/zh/v2</a></p><p><strong>工具</strong>：kali、python</p><hr><hr><blockquote><p><strong>解题过程</strong></p></blockquote><p>查看文件类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF# file miscall </span><br><span class="line">miscall: bzip2 compressed data, block size &#x3D; 900k</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现是bzip2压缩包，解压。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF# bzip2 -d miscall </span><br><span class="line">bzip2: Can&#39;t guess original name for miscall -- using miscall.out </span><br><span class="line">#无法猜出miscall的原始名称--使用miscall.out</span><br><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF# ls</span><br><span class="line">miscall.out</span><br></pre></td></tr></table></figure><p>虽然报错，但是可以发现文件名发生了改变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF# bzip2 -d miscall </span><br><span class="line">bzip2: Can&#39;t guess original name for miscall -- using miscall.out</span><br><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF# ls</span><br><span class="line">miscall.out</span><br></pre></td></tr></table></figure><p>二话不说再看看文件类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF# file miscall.out </span><br><span class="line">miscall.out: POSIX tar archive (GNU)  #tar文件</span><br></pre></td></tr></table></figure><p>继续解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF# tar -xvf miscall.out </span><br><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF# ls</span><br><span class="line">ctf  miscall.out</span><br></pre></td></tr></table></figure><p>发现出现了一个新的目录ctf，进去看看，终于看到flag了，可是是个假的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF# cd ctf&#x2F;</span><br><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF&#x2F;ctf# ls</span><br><span class="line">flag.txt</span><br><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF&#x2F;ctf# cat flag.txt </span><br><span class="line">Nothing to see here, moving along...</span><br></pre></td></tr></table></figure><p>什么都没有，怎么办？再仔细看看,发现了隐藏文件.git,是个啥，百度一波，找到了可用的命令，试试看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF&#x2F;ctf# ls -a</span><br><span class="line">.  ..  flag.txt  .git</span><br></pre></td></tr></table></figure><p>使用命令查看git记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF&#x2F;ctf# git log</span><br><span class="line">commit bea99b953bef6cc2f98ab59b10822bc42afe5abc (HEAD -&gt; master)</span><br><span class="line">Author: Linus Torvalds &lt;torvalds@klaava.Helsinki.Fi&gt;</span><br><span class="line">Date:   Thu Jul 24 21:16:59 2014 +0200</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br></pre></td></tr></table></figure><p>使用git stash show校验列表中存储的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF&#x2F;ctf# git stash show</span><br><span class="line"> flag.txt | 25 ++++++++++++++++++++++++-</span><br><span class="line"> s.py     |  4 ++++</span><br><span class="line"> 2 files changed, 28 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用git stash apply 重新进行存储，复原文件,可以发现出现一个s.py文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF&#x2F;ctf# git stash apply</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   s.py</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   flag.txt</span><br><span class="line"></span><br><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF&#x2F;ctf# ls</span><br><span class="line">flag.txt  s.py</span><br></pre></td></tr></table></figure><p>运行s.py文件，得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;CTF&#x2F;ctf# python s.py </span><br><span class="line">NCN4dd992213ae6b76f27d7340f0dde1222888df4d3</span><br></pre></td></tr></table></figure><hr><hr><h1 id="Get-the-key-txt"><a href="#Get-the-key-txt" class="headerlink" title="Get-the-key.txt"></a><strong>Get-the-key.txt</strong></h1><p>在Linux中用file打开文件，发现是linux系统文件<br>将forensic100解压在该文件夹下，发现为同类压缩包<br>244个压缩包根本看不过来，所以根据题目提示 get-the-key.txt，使用<code>grep -r key,txt</code><br>接下来解压文件，这里有一点问题<br>用 gunzip 1无法识别文件后缀， tar -xzvf 1 没有反应，使用binwalk 1 也没有得到结果<br>最后使用 gunzip&lt;1 得到flag<br>SECCON{@]NL7n±s75FrET]vU=7Z}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF$ file &#39;&#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF&#x2F;forensic100&#39; </span><br><span class="line">&#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF&#x2F;forensic100: Linux rev 1.0 ext2 filesystem data, UUID&#x3D;0b92a753-7ec9-4b20-8c0b-79c1fa140869</span><br><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF$ binwalk -e &#39;&#x2F;home&#x2F;kali1&#x2F;桌面&#x2F;CTF&#x2F;forensic100&#39; </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             Linux EXT filesystem, blocks count: 2048, image size: 2097152, rev 1.0, ext2 filesystem data, UUID&#x3D;0b92a753-7ec9-4b20-8c0b-79c1fa14fa14</span><br><span class="line"></span><br><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF$ grep -r key.txt</span><br><span class="line">匹配到二进制文件 forensic100</span><br><span class="line">匹配到二进制文件 _forensic100.extracted&#x2F;0.ext</span><br><span class="line">匹配到二进制文件 _forensic100.extracted&#x2F;ext-root&#x2F;1</span><br><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF$ cd _forensic100.extracted</span><br><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF&#x2F;_forensic100.extracted$ cd ext-root</span><br><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF&#x2F;_forensic100.extracted&#x2F;ext-root$ gunzip&lt;1</span><br><span class="line">SECCON&#123;@]NL7n+-s75FrET]vU&#x3D;7Z&#125;</span><br><span class="line">kali1@kali:~&#x2F;桌面&#x2F;CTF&#x2F;_forensic100.extracted&#x2F;ext-root$ </span><br></pre></td></tr></table></figure><p>SECCON{@]NL7n±s75FrET]vU=7Z}</p><hr><hr><h1 id="python-Reverse-it"><a href="#python-Reverse-it" class="headerlink" title="python Reverse-it"></a><strong>python Reverse-it</strong></h1><p>下载文件，放入winhex，入眼的是一坨乱码！！！<br>看了看文件头9DFF，好像jpeg图片的文件尾FFD9，在滑到最后看了一下，看见：<br>反过来好像就是jpeg图片的文件头！！！<br>直接copy16进制，逆序之后再winhex新建文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; &quotquot;</span><br><span class="line"></span><br><span class="line">x &#x3D; s[::-1]</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x &#x3D; &quotquot;</span><br><span class="line"></span><br><span class="line">#flag : SECCON&#123;6in_tex7&#125;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="打野"><a href="#打野" class="headerlink" title="打野"></a><strong>打野</strong></h1><p>放入winhex没有发现异常<br>再利用zsteg检测下图片里是否存有隐写数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@kali:&#x2F;home&#x2F;kali1# zsteg &#39;&#x2F;home&#x2F;kali1&#x2F;瞅啥.bmp&#39; </span><br><span class="line">[?] 2 bytes of extra data after image end (IEND), offset &#x3D; 0x269b0e</span><br><span class="line">extradata:0         .. [&quot;\x00&quot; repeated 2 times]</span><br><span class="line">imagedata           .. text: [&quot;\r&quot; repeated 18 times]</span><br><span class="line">b1,lsb,bY           .. &lt;wbStego size&#x3D;120, ext&#x3D;&quot;\x00\x8E\xEE&quot;, data&#x3D;&quot;\x1Ef\xDE\x9E\xF6\xAE\xFA\xCE\x86\x9E&quot;..., even&#x3D;false&gt;</span><br><span class="line">b1,msb,bY           .. text: &quot;qwxf&#123;you_say_chick_beautiful?&#125;&quot;</span><br><span class="line">b2,msb,bY           .. text: &quot;i2,C8&amp;k0.&quot;</span><br><span class="line">b2,r,lsb,xY         .. text: &quot;UUUUUU9VUUUUUUUUUUUUUUUUUUUUUU&quot;</span><br><span class="line">b2,g,msb,xY         .. text: [&quot;U&quot; repeated 22 times]</span><br><span class="line">b2,b,lsb,xY         .. text: [&quot;U&quot; repeated 10 times]</span><br><span class="line">b3,g,msb,xY         .. text: &quot;V9XDR\\d@&quot;</span><br><span class="line">b4,r,lsb,xY         .. file: TIM image, Pixel at (4353,4112) Size&#x3D;12850x8754</span><br><span class="line">b4,g,lsb,xY         .. text: &quot;3\&quot;\&quot;\&quot;\&quot;\&quot;3###33##3#UDUEEEEEDDUETEDEDDUEEDTEEEUT#!&quot;</span><br><span class="line">b4,g,msb,xY         .. text: &quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;\&quot;DDDDDDDDDDDD\&quot;\&quot;\&quot;\&quot;DDDDDDDDDDDD*LD&quot;</span><br><span class="line">b4,b,lsb,xY         .. text: &quot;gfffffvwgwfgwwfw&quot;</span><br></pre></td></tr></table></figure><p>成功出现flag：qwxf{you_say_chick_beautiful?}</p><hr><hr><h1 id="我们的秘密是绿色的"><a href="#我们的秘密是绿色的" class="headerlink" title="我们的秘密是绿色的"></a><strong>我们的秘密是绿色的</strong></h1><p>下载文件，发现是一张图片，看名字绿色，我还是以为是啥lsb隐写啥的，结果啥都没发现<br>仔细看题目我们的秘密，刚好有一款工具就叫做Our secret：<br>用工具打开，发现要密码，，，各种尝试，green，GREEN啊，，，，<br>最后发现图片上的日历有些数字颜色是绿色的.<br>输入密码：0405111218192526<br>经过解密后得到一个try.zip压缩包：<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/1.png"><br>用WinRAR打开，发现有段注释：<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/2.png"><br>众所周知生日一般都是八位数的纯数字，暴力得到密码，解压得到两个文件：<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/3.png"><br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/4.png"><br>很明显是明文攻击（明文攻击要用winrar压缩明文）<br>将再次得到的压缩包破解伪加密，得到字符串<br>经栅栏再经凯撒得到flag<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/5.png"><br>flag:flag{ssctf_@seclover%coffee_*}</p><hr><hr><h1 id="倒立屋"><a href="#倒立屋" class="headerlink" title="倒立屋"></a><strong>倒立屋</strong></h1><p><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/%E5%80%92%E7%AB%8B%E5%B1%8B.png"><br>解压得到png图片，为lsb隐写，<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/%E5%80%92%E7%AB%8B%E5%B1%8B2.png"><br>将IsCc_2019倒过来就是flag：flag{9102_cCsI}</p><hr><hr><h1 id="小小的PDF"><a href="#小小的PDF" class="headerlink" title="小小的PDF"></a><strong>小小的PDF</strong></h1><p>下载得到pdf文件<br>binwalk分析发现有隐藏文件<br>foremost分解得到jpd，即得到flag</p><hr><hr><h1 id="glance-50"><a href="#glance-50" class="headerlink" title="glance-50"></a><strong>glance-50</strong></h1><p><strong>原理</strong>：convert分离gif、montage图片拼接<br>拿到一个gif图片，很窄(宽2px)，无语。</p><p>我们可以先把gif分解开，kali的convert命令可以，也可以用其他的工具：convert glance.gif flag.png<br>总共分离出来200个图片。</p><p>这么窄的图，难道要横着拼起来？</p><p> 于是又用到一个工具：montage，这个工具用法很多，也很强大</p><p>用命令：montage flag*.png -tile x1 -geometry +0+0 flag.png</p><p>-tile是拼接时每行和每列的图片数，这里用x1，就是只一行</p><p>-geometry是首选每个图和边框尺寸，我们边框为0，图照原始尺寸即可<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/glance.png"></p><p>所以flag：TWCTF{Bliss by Charles O’Rear}</p><hr><hr><h1 id="misc-pic-again"><a href="#misc-pic-again" class="headerlink" title="misc_pic_again"></a><strong>misc_pic_again</strong></h1><p>观察发现为lsb隐写，提取出zip压缩包<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/6.png"><br>放入winhex搜索hctf，得到flag<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/7.png"></p><hr><hr><h1 id="适合作为桌面"><a href="#适合作为桌面" class="headerlink" title="适合作为桌面"></a><strong>适合作为桌面</strong></h1><p>下载图片到Stegsolve打开、发现二维码<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/8.png"><br>扫描后得到十六进制文件，放入winhex<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/9.png"><br>发现为pyc文件，将此晚间保存为pyc文件进行反编译得到脚本<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/10.png"><br>跑一下脚本得到flag<br>flag{38a57032085441e7}</p><h1 id="心仪的公司"><a href="#心仪的公司" class="headerlink" title="心仪的公司"></a><strong>心仪的公司</strong></h1><hr><hr><h1 id="Miscellaneous-200"><a href="#Miscellaneous-200" class="headerlink" title="Miscellaneous-200"></a><strong>Miscellaneous-200</strong></h1><hr><hr><h1 id="Recover-Deleted-File"><a href="#Recover-Deleted-File" class="headerlink" title="Recover-Deleted-File"></a><strong>Recover-Deleted-File</strong></h1><p>下载得到一个无后缀文件，binwalk查看<br>用extundelete恢复误删文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extundelete disk-image --restore-all</span><br></pre></td></tr></table></figure><p>生成文件夹<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/11.png"><br>运行文件夹中的flag，得到flag<br><img src="/2021/02/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C2/12.png"></p><blockquote><p>de6838252f95d3b9e803b28df33b4baa<br>.<br>.</p></blockquote><blockquote><p>scalpel<br>  扫描整个镜像文件，根据配置文件寻找相关文件类型的文件头和文件尾，正常找到后将这段内容雕刻出来；当找到了文件的头部，但是在它附近没有找到文件尾标志的时候，scalpel提供两种处理方式，一是放弃对该文件的雕刻，二是根据自定义的各类文件的最大长度进行雕刻。</p></blockquote><hr><hr><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h1><ol><li>file查看文件类型</li><li>bzip2 -d miscall解压</li><li>tar -xvf miscall.out解压</li><li>cat命令</li><li>git lot 命令查看git记录</li><li>git stash show校验列表中存储的文件</li><li>git stash apply 重新进行存储，复原文件</li><li>python s.py 运行s.py</li><li>grep -r key,txt 查找文件位置</li><li>用 gunzip 1无法识别文件后缀， tar -xzvf 1 没有反应，使用binwalk 1 也没有得到结果，最后使用 gunzip&lt;1 得到flag</li><li>zsteg使用</li><li>Our secret工具</li><li>明文攻击要用winrar压缩明文</li><li>convert分离gif、montage图片拼接</li><li>pyc文件</li><li>extundelete恢复误删文件</li><li>scalpel未懂</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU1</title>
      <link href="2021/02/12/BUU1/"/>
      <url>2021/02/12/BUU1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bugku1</title>
      <link href="2021/01/20/Bugku1/"/>
      <url>2021/01/20/Bugku1/</url>
      
        <content type="html"><![CDATA[<h1 id="社工-进阶收集"><a href="#社工-进阶收集" class="headerlink" title="社工-进阶收集"></a><strong>社工-进阶收集</strong></h1><p><a href="https://blog.csdn.net/qq_46230755/article/details/113863792">wp</a></p><hr><hr><hr><h1 id="这是一张单纯的图片"><a href="#这是一张单纯的图片" class="headerlink" title="这是一张单纯的图片"></a><strong>这是一张单纯的图片</strong></h1><p>binwalk分析、exiftool查看都无内容，<br>在十六进制尾端发现Unicode编码<br><img src="/2021/01/20/Bugku1/1.png"><br>解码得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key&#123;you are right&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a><strong>隐写</strong></h1><p>放入虚拟机中无法打开，想到修改大小<br><img src="/2021/01/20/Bugku1/2.png"><br>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BUGKU&#123;a1e5aSA&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="wireshark-telnet"><a href="#wireshark-telnet" class="headerlink" title="wireshark telnet"></a><strong>wireshark telnet</strong></h1><hr><hr><hr><h1 id="眼见非实"><a href="#眼见非实" class="headerlink" title="眼见非实"></a><strong>眼见非实</strong></h1><p>下载的docx文件无法正常打开<br>将后缀修改为zip,文件夹如图<br><img src="/2021/01/20/Bugku1/3.png"><br>按一般的套路，flag在document.xml中<br><img src="/2021/01/20/Bugku1/4.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;F1@g&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="啊哒"><a href="#啊哒" class="headerlink" title="啊哒"></a><strong>啊哒</strong></h1><p>将图片binwalk分析发现有压缩包<br><img src="/2021/01/20/Bugku1/5.png"><br>此处为真加密，一边爆破，一边找提示<br><img src="/2021/01/20/Bugku1/6.png"><br>这里发现了一串数字<br><img src="/2021/01/20/Bugku1/7.png"><br>果然解出了密码<br><img src="/2021/01/20/Bugku1/8.png"><br>得到flag<br><img src="/2021/01/20/Bugku1/9.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3XiF_iNf0rM@ti0n&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="wiresharkping"><a href="#wiresharkping" class="headerlink" title="wiresharkping"></a><strong>wiresharkping</strong></h1><hr><hr><hr><h1 id="赛博朋克"><a href="#赛博朋克" class="headerlink" title="赛博朋克"></a><strong>赛博朋克</strong></h1><p>放入虚拟机中一顿操作后为lsb隐写<br><img src="/2021/01/20/Bugku1/10.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Hel1o_Wor1e&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="贝斯手"><a href="#贝斯手" class="headerlink" title="贝斯手"></a><strong>贝斯手</strong></h1><p>题目内容如下<br><img src="/2021/01/20/Bugku1/11.png"><br>看到压缩包想边爆破边找线索，结果直接破开了<br>其实提示在 <code>介绍.txt</code> 里<br>flag.txt内容如下<br><img src="/2021/01/20/Bugku1/12.png"><br>此处为md5和base58的混合编码<br>前一段为md5，后部分为base58<br><img src="/2021/01/20/Bugku1/13.png"><br><img src="/2021/01/20/Bugku1/14.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;this_is_md5_and_base58&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="又一张图片，还单纯吗"><a href="#又一张图片，还单纯吗" class="headerlink" title="又一张图片，还单纯吗"></a><strong>又一张图片，还单纯吗</strong></h1><p>binwalk分析发现隐藏jpg<br><img src="/2021/01/20/Bugku1/15.png"><br>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">falg&#123;NSCTF_e6532a34928a3d1dadd0b049d5a3cc57&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="猜"><a href="#猜" class="headerlink" title="猜"></a><strong>猜</strong></h1><p>百度识图<br><img src="/2021/01/20/Bugku1/16.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key&#123;liuyifei&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="宽带信息泄露"><a href="#宽带信息泄露" class="headerlink" title="宽带信息泄露"></a><strong>宽带信息泄露</strong></h1><p>用 <strong>routerpassview</strong> 打开<br>搜索username，得到flag<br><img src="/2021/01/20/Bugku1/17.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;053700357621&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="隐写2"><a href="#隐写2" class="headerlink" title="隐写2"></a><strong>隐写2</strong></h1><p>先从图片中分离出压缩包<br><img src="/2021/01/20/Bugku1/18.png"><br>根据提示爆破压缩包里的压缩包<br><img src="/2021/01/20/Bugku1/19.png"><br>得到jpg文件<br><img src="/2021/01/20/Bugku1/20.png"><br>在十六进制尾端发现flag<br><img src="/2021/01/20/Bugku1/21.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1@g&#123;y0u Are a h@cker!&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="今日小结"><a href="#今日小结" class="headerlink" title="今日小结"></a><strong>今日小结</strong></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>不错的misc</title>
      <link href="2020/12/08/%E4%B8%8D%E9%94%99%E7%9A%84misc/"/>
      <url>2020/12/08/%E4%B8%8D%E9%94%99%E7%9A%84misc/</url>
      
        <content type="html"><![CDATA[<h1 id="hit-the-core"><a href="#hit-the-core" class="headerlink" title="hit-the-core"></a><strong>hit-the-core</strong></h1><p>strings查看字符串，好像还真得到一个有用的串：<br><img src="/2020/12/08/%E4%B8%8D%E9%94%99%E7%9A%84misc/2012081046.png" alt="图片"></p><p> 这个串挺长的，{}的位置正确，凯撒、栅栏就别想了，能不能从串本身找到规律？</p><p>仔细观察，发现前面部分的大写字母拼起来正好是ALEXCTF，而且每个字母之间隔了4个字母，写个脚本提取一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data &#x3D; &#39;cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc&#123;bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv&#125;&#39;</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in range(3, len(data), 5):</span><br><span class="line">    flag +&#x3D; data[i]</span><br><span class="line"> </span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>拿到flag：ALEXCTF{K33P_7H3_g00D_w0rk_up}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>西南石油大学[智仁杯]MISC</title>
      <link href="2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/"/>
      <url>2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/</url>
      
        <content type="html"><![CDATA[<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a><strong>misc</strong></h1><h2 id="耗子尾汁"><a href="#耗子尾汁" class="headerlink" title="耗子尾汁"></a><strong>耗子尾汁</strong></h2><p>题目<br><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/010101.png" alt="图片"><br>使用foremost分解得到一个压缩包，里面有一个mp4<br><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/010102.png" alt="图片"><br>mp4中，藏了可疑字符，<br><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/010103.png" alt="图片"><br>再次foremost分解mp4，的要一个加密压缩包，此字符base64解码后，为该压缩包密码<br>打开压缩包的txt，发现一串字符和最后一步的提示。<br><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/010104.png" alt="图片"><br>由于题目已经把单词长度给出，先把能猜的猜出来，大概就是这样<br><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/010106.jpg" alt="图片"><br>用在线工具把剩余的解出来<br><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/010105.png" alt="图片"></p><h2 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a><strong>套娃</strong></h2><p>此文件持续在xinhex中打开，全是zip文件，开到最后的密钥txt需要密码，另外一个zip的winhex中有一段password，<br>用password拿到密钥<br>大致过程如下<br><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/010201.png" alt="图片"><br><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/010202.png" alt="图片"><br><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/010203.png" alt="图片"><br>在线RC4得到flag<br><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/010204.png" alt="图片"></p><h2 id="找找吧"><a href="#找找吧" class="headerlink" title="找找吧"></a><strong>找找吧</strong></h2><p>找找吧</p><ol><li>下载得到压缩包 find.rar</li><li>在压缩包的末尾找到内容，key is PPPaAaS</li><li>解压压缩包得到文件 findme.mp3 和 secret.rar 文件</li><li>修改 findme.mp3 文件名为 findme.zip，解压得到采茶纪.mp3 和哈哈哈.png 文件</li><li>发现采茶纪.mp3 末尾有一段莫斯密码，听取并记录</li><li>得到：-.. ….- …– —-. -…. …– . —-. ..— -… —– .—- ..— .- .- -…</li><li>解密得到：D43963E92B012AAB</li><li>在 <a href="https://www.somd5.com/">https://www.somd5.com/</a> 上搜索得到解密结果：n1ce_try</li><li>解压压缩包得到 hint.png 和 is_this_the_flag.gif 文件</li><li>提取 gif 文件中的每一帧，发现有一帧中有内容：bFyd_W1l3_Cah</li><li>修改 hint.png 的长度，发现提示 Veni,Vidi,Vici，百度搜索得到此内容意思为凯撒。</li><li>对 bFyd_W1l3_Cah 依次进行移位，解密得到：sWpu_N1c3_Try</li><li>flag{sWpu_N1c3_Try}</li></ol><h2 id="来猜迷了"><a href="#来猜迷了" class="headerlink" title="来猜迷了"></a><strong>来猜迷了</strong></h2><p>开局一张图problem.png</p><p>考虑lsb隐写</p><p>stegsolve提取</p><p><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/2012071.png" alt="图片"></p><p>保存成zip文件</p><p>得到mi.jpg和一个uuu.pcap</p><p>uuu.pcap键盘流量解密下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;CAP&gt;ag&lt;SPACE&gt;dx&lt;SPACE&gt;ag&lt;SPACE&gt;dx&lt;SPACE&gt;ag&lt;SPACE&gt;dx</span><br></pre></td></tr></table></figure><p>这里卡了有点久，只有AGDX四个字母</p><blockquote><p>ADFGX解密<br><a href="https://xz.aliyun.com/t/3603">https://xz.aliyun.com/t/3603</a></p></blockquote><p><img src="/2020/12/06/%E8%A5%BF%E5%8D%97%E7%9F%B3%E6%B2%B9%E5%A4%A7%E5%AD%A6-%E6%99%BA%E4%BB%81%E6%9D%AF-MISC/2012072.png" alt="图片"></p><blockquote><p>AGDXAGDXAGDX-&gt;gogogo<br>直接对着表解密</p></blockquote><p>看题面来猜谜了有点outguess的意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outguess -k gogogo -r mi.jpg 1.txt</span><br></pre></td></tr></table></figure><p>flag{Out9uEsS_1s_V4rY_e4sy}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown</title>
      <link href="2020/11/30/markdown/"/>
      <url>2020/11/30/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a><strong>Markdown基本语法</strong></h1><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>相比WYSIWYG编辑器</p><p>优点：<br>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p><p>缺点：<br>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h1><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a><strong>字体</strong></h1><ul><li><strong>加粗</strong></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><strong>斜体</strong></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><strong>斜体加粗</strong></li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li><strong>删除线</strong></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*&#96;</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a><strong>分割线</strong></h1><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h1><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](heihei.jpg)</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/2020/11/30/markdown/heihei.jpg" alt="图片"></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a><strong>超链接</strong></h1><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度](http:&#x2F;&#x2F;baidu.com)</span><br></pre></td></tr></table></figure><p>效果如下：<br><a href="http://baidu.com/">百度</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h1><p><strong>无序列表</strong><br>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p><strong>有序列表</strong><br>语法：<br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><p><strong>列表嵌套</strong><br><strong>上一级和下一级之间三个空格即可</strong></p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级无序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li><p>一级有序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级有序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h1><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;代码内容&#96;</span><br></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  </span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><blockquote><p><em>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可</em></p></blockquote><p>示例：<br>单行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;wawohaolihai&#96;</span><br></pre></td></tr></table></figure><p>代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><p>效果如下：<br><code>wawohaolihai</code><br>代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界misc</title>
      <link href="2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/"/>
      <url>2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/</url>
      
        <content type="html"><![CDATA[<h1 id="新手misc"><a href="#新手misc" class="headerlink" title="新手misc"></a><strong>新手misc</strong></h1><h2 id="this-is-flag"><a href="#this-is-flag" class="headerlink" title="this is flag"></a>this is flag</h2><p>直接复制粘贴即可<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/000101.png" alt="图片">  </p><h2 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h2><p>题目如下：<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/000201.png" alt="图片"><br>在线转换word形式<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/pdf.png" alt="图片"></p><h2 id="如来13掌"><a href="#如来13掌" class="headerlink" title="如来13掌"></a>如来13掌</h2><pre><code>打开文件看到佛曰编码先去解码</code></pre><p><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/rl1.png" alt="图片"><br>    得到一串字符，<strong>看到题目联想到rot13</strong>，去解一次rot13<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/rl2.png" alt="图片"><br>    base64得到flag<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/rl3.png" alt="图片"></p><h2 id="give-you-flag"><a href="#give-you-flag" class="headerlink" title="give you flag"></a>give you flag</h2><p>下载附件，打开gif图会看到小龙人数完钞票会展示二维码，使用stegsolve等工具查看帧数得到二维码。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/000401.png" alt="图片"></p><p>二维码缺少三个小方块，而这些小方块被称为定位图案，用于标记二维码矩形的大小，用三个定位图案可以标识并确定一个二维码矩形的位置和方向。</p><p>使用工具ps将二维码修复完全便可获得完整二维码，扫描获得flag。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/000402.png" alt="图片"></p><p>得到flag：flag{e7d478cf6b915f50ab1277f78502a2c5}</p><h2 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h2><pre><code>一共103张黑白图片，优先考虑二进制</code></pre><p> <img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/gif.png" alt="图片"></p><h2 id="掀桌子"><a href="#掀桌子" class="headerlink" title="掀桌子"></a>掀桌子</h2><h2 id="stegano"><a href="#stegano" class="headerlink" title="stegano"></a>stegano</h2><pre><code>发现里面有别的内容</code></pre><p><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/stegano1.png" alt="图片"><br>    复制出来有点不对<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/stegano2.png" alt="图片"><br>    复制全文试试<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/stegano3.png" alt="图片"><br>    转成莫斯得到flag<br>.<br>.</p><h2 id="SimpleRAR"><a href="#SimpleRAR" class="headerlink" title="SimpleRAR"></a>SimpleRAR</h2><p>1、先将文件解压，发现里面只有一个flag.txt，但是用winHex打开发现应该有png文件。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/000801.png" alt="图片"></p><p>2、将A8 3C 7A 修改为 A8 3C 74 。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/000802.png" alt="图片"></p><p>3、保存后解压，再把sercet.png丢到winhex里发现文件头为gif图，将图片后缀名改为.gif。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/000803.png" alt="图片"></p><p>4、分离出来，然后用 Stegsolve 查看。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/000804.png" alt="图片"></p><p>把这个二维码拼起来，再把定位标志补上扫码得到 flag。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/000805.png" alt="图片"><br>得到flag：flag{yanji4n_bu_we1shi}</p><h2 id="坚持60s"><a href="#坚持60s" class="headerlink" title="坚持60s"></a>坚持60s</h2><p>打开是一个没法完成的游戏，用java-gui打开搜索flag<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/60s.png" alt="图片"><br>解base64后得到flag<br>.<br>.</p><h2 id="base64stego"><a href="#base64stego" class="headerlink" title="base64stego"></a>base64stego</h2><p>.<br>.</p><h2 id="ext3"><a href="#ext3" class="headerlink" title="ext3"></a>ext3</h2><p>360压缩打开，发现好多文件，搜索flag<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/ext3.png" alt="图片"><br>经base64解密得到flag<br>！！！！！！！！！！！（补充linux）！！！！！！！！！<br>.<br>.</p><h2 id="功夫再高也怕菜刀"><a href="#功夫再高也怕菜刀" class="headerlink" title="功夫再高也怕菜刀"></a>功夫再高也怕菜刀</h2><p>wireshark打开搜索falg内容过多，搜索flag.txt，发现1150之后都有一个666.jpg<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/0701.png" alt="图片"><br>在linux中分解得到一个加密压缩包。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/0702.png" alt="图片"><br>把666.jpg（010editor  winhex）转出来得到password<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/0703.png" alt="图片"><br>打开压缩包得到flag<br>.<br>.</p><hr><hr><hr><hr><h1 id="进阶misc-1"><a href="#进阶misc-1" class="headerlink" title="进阶misc(1)"></a><strong>进阶misc(1)</strong></h1><h2 id="1-base64➗4"><a href="#1-base64➗4" class="headerlink" title="1.base64➗4"></a>1.base64➗4</h2><p>直接base16得到flag<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/0101.png" alt="图片"></p><h2 id="2-wireshark-1"><a href="#2-wireshark-1" class="headerlink" title="2.wireshark-1"></a>2.wireshark-1</h2><p>直接wireshark搜索password找到密码<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/0201.png" alt="图片"></p><h2 id="3-pure-color"><a href="#3-pure-color" class="headerlink" title="3.pure_color"></a>3.pure_color</h2><p>打开时一张空白图片，使用stegxolve得到flag<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/0301.png" alt="图片"></p><h2 id="4-something-in-image"><a href="#4-something-in-image" class="headerlink" title="4.something in image"></a>4.something in image</h2><p>记事本打开搜索flag<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/010201.png" alt="图片"></p><h2 id="a-good-idea"><a href="#a-good-idea" class="headerlink" title="a_good_idea"></a><strong>a_good_idea</strong></h2><p>1.下载附件</p><p>2.用winhex打开该图片，发现有隐藏文件,查wp说要把压缩包后缀名改成.zip，再次解压发现多了两张图片和一个txt文件，</p><p>3.查看txt文件，内容如下，</p><p><code>try to find the secret of pixels</code><br>4.利用stegsolve将两张图combine，得到像素相减的图，（先打开to_do，否则得不到二维码）<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/2012072320.png" alt="图片"></p><p>5.用stegsolve转换色道，得到二维码，扫描得到flag，</p><h2 id="Aesop-secret"><a href="#Aesop-secret" class="headerlink" title="Aesop_secret"></a><strong>Aesop_secret</strong></h2><p>先下载附件，是一个压缩包，紧接着解压，发现一个gif文件，用Photoshop打开这个文件，显现每一帧图像。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/2012072330.png" alt="图片"><br>再看看题目，想到有一个加密方式叫AES加密，ISCC应该是密钥。这么一想，我们还需要找到加密后的字符串（尝试一下binwalk）</p><p>然而binwalk并没啥用，说明这个gif文件中没有混着其他文件。我们还有一个办法，就是将其放入winhex中查看一下。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/2012072332.png" alt="图片"><br>功夫不负有心人，我们在gif文件的末尾找到了加密后的字符串。于是我们进行一下<a href="https://www.sojson.com/encrypt_aes.html">ASE在线解密</a>。<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/2012072333.png" alt="图片"><br>连续解密两次后得到flag：DugUpADiamondADeepDarkMine。</p><h2 id="simple-transfer"><a href="#simple-transfer" class="headerlink" title="simple_transfer"></a><strong>simple_transfer</strong></h2><p>binwalk分析发现有PDF文件<br>使用foremost分解得到PDF<br>打开即得到flag</p><h2 id="Training-Stegano-1"><a href="#Training-Stegano-1" class="headerlink" title="Training-Stegano-1"></a><strong>Training-Stegano-1</strong></h2><p>使用winhex查看器查看，果然看到了passwd字段。</p><p>至此flag为：stegancI</p><h2 id="can-has-stdio"><a href="#can-has-stdio" class="headerlink" title="can_has_stdio?"></a><strong>can_has_stdio?</strong></h2><p>记事本打开misc50<br>发现brainfuck，<a href="http://ctf.ssleye.com/brain.html">在线解密</a>得到flag</p><h2 id="Janos-the-Ripper"><a href="#Janos-the-Ripper" class="headerlink" title="János-the-Ripper"></a><strong>János-the-Ripper</strong></h2><p>winhex打开后发现有zip，更改后缀名得到加密flag.txt<br>找不到任何密码提示，直接暴力破解得到密码fish</p><h2 id="Test-flag-please-ignore"><a href="#Test-flag-please-ignore" class="headerlink" title="Test-flag-please-ignore"></a><strong>Test-flag-please-ignore</strong></h2><p>winhex打开发现十六进制，转为ascii得到flag</p><h2 id="hit-the-core"><a href="#hit-the-core" class="headerlink" title="hit-the-core"></a><strong>hit-the-core</strong></h2><p>strings查看字符串，好像还真得到一个有用的串：<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/2012081046.png" alt="图片"></p><p> 这个串挺长的，{}的位置正确，凯撒、栅栏就别想了，能不能从串本身找到规律？</p><p>仔细观察，发现前面部分的大写字母拼起来正好是ALEXCTF，而且每个字母之间隔了4个字母，写个脚本提取一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data &#x3D; &#39;cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc&#123;bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv&#125;&#39;</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in range(3, len(data), 5):</span><br><span class="line">    flag +&#x3D; data[i]</span><br><span class="line"> </span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>拿到flag：ALEXCTF{K33P_7H3_g00D_w0rk_up}</p><h2 id="快乐游戏题"><a href="#快乐游戏题" class="headerlink" title="快乐游戏题"></a><strong>快乐游戏题</strong></h2><p>玩游戏得出flag</p><h2 id="Banmabanma"><a href="#Banmabanma" class="headerlink" title="Banmabanma"></a><strong>Banmabanma</strong></h2><p><a href="https://online-barcode-reader.inliteresearch.com/">在线扫描条形码</a></p><h2 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a><strong>easycap</strong></h2><p>wireshark打开，追踪TCP流得到flag</p><h2 id="reverseMe。"><a href="#reverseMe。" class="headerlink" title="reverseMe。"></a><strong>reverseMe</strong>。</h2><p>ps水平翻转提取文字，得到flag</p><h2 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a><strong>stage1</strong></h2><p>下载附件后，stegsolve打开，转换色道</p><p>得到一张二维码，保存后,QR research扫描二维码</p><p>得到一连串hex编码，扔到winhex里<br><img src="/2020/11/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc/2012081204.png"><br>观察后发现，文件头03F30D0A，这个是.pyc文件（反编译）</p><p>再Easy Python Decompiler反编译，打开后，得到源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Embedded file name: test.py</span><br><span class="line">str &#x3D; [65,108, 112,104,97,76,97,98]</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in str:</span><br><span class="line">    flag +&#x3D; chr(i)</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><p>运行一下，得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/27/hello-world/"/>
      <url>2020/11/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编码与加解密</title>
      <link href="2020/11/04/misc%E4%B9%8B%E7%BC%96%E7%A0%81%E4%B8%8E%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
      <url>2020/11/04/misc%E4%B9%8B%E7%BC%96%E7%A0%81%E4%B8%8E%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>misc之内存取证</title>
      <link href="2020/11/03/misc%E4%B9%8B%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
      <url>2020/11/03/misc%E4%B9%8B%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>misc之流量分析</title>
      <link href="2020/11/02/misc%E4%B9%8B%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>2020/11/02/misc%E4%B9%8B%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Webshell上传"><a href="#Webshell上传" class="headerlink" title="Webshell上传"></a>Webshell上传</h1><ol><li>usb流量包分析<pre><code> 键盘流量     Flag藏于usb流量中，通过USB协议数据中的键盘键码转换成键位 鼠标流量     Flag藏于usb流量中，通过USB协议数据中的鼠标移动轨迹转换成Flag。</code></pre>20 其他流量包分析<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method&#x3D;&#x3D;&quot;POST&quot; &amp;&amp; http contains &#x3D;&#x3D; &quot;关键字&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="sql盲注流量包分析"><a href="#sql盲注流量包分析" class="headerlink" title="sql盲注流量包分析"></a>sql盲注流量包分析</h1><p>首先需要导出所有的http对象放到一个文件夹中。</p><p>利用ls -l data &gt; data.txt来把文件名等内容放到data.txt中</p><p>然后利用脚本对文件的长度进行过滤筛选出成功注入的文件名。<br>传入图片流量分析</p><p>对于传入图片的流量，如果图片的16进制组是以参数的方式传输的，那么我们可以通过如下方式来恢复图片。<br>找到传输图片的16进制组参数<br><img src="/2020/11/02/misc%E4%B9%8B%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/1.png"><br>将需要的值复制下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFD8..........................</span><br></pre></td></tr></table></figure><p>创建一个新文件并存入值</p><p><img src="/2020/11/02/misc%E4%B9%8B%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/2.png"><br>点击OK即可将16进制码传入。修改后缀即可查看原图片了<br><img src="/2020/11/02/misc%E4%B9%8B%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/3.png"><br>流量包中有zip提示<br><img src="/2020/11/02/misc%E4%B9%8B%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/4.png"><br>可以使用foremost 工具来还原zip<br><img src="/2020/11/02/misc%E4%B9%8B%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/5.png"><br>一种新的方法<br>导出分组字节流后存为zip格式即可打开。<br><img src="/2020/11/02/misc%E4%B9%8B%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/6.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>misc之隐写</title>
      <link href="2020/11/01/misc%E4%B9%8B%E9%9A%90%E5%86%99/"/>
      <url>2020/11/01/misc%E4%B9%8B%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a><strong>通用</strong></h1><h2 id="winhex-010Editor"><a href="#winhex-010Editor" class="headerlink" title="winhex  010Editor"></a><strong>winhex  010Editor</strong></h2><p>最常用的工具</p><ol><li>藏于文件尾</li><li>附加其他文件</li><li>含其他文件</li><li>夹在两文件之间</li><li>修改文件</li><li>转编码</li><li>异或运算</li><li>图案</li></ol><h2 id="silenteye"><a href="#silenteye" class="headerlink" title="silenteye"></a><strong>silenteye</strong></h2><p>文件格式： png,jpg,jpeg,bmp,tiff,tif,wav<br>可加密码</p><h2 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a><strong>binwalk</strong></h2><p> <strong>获取帮助</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -h</span><br><span class="line">$ binwalk -help</span><br></pre></td></tr></table></figure><p> <strong>固件扫描</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk firmware.bin </span><br></pre></td></tr></table></figure><p> <strong>提取文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 使用默认的预定义配置文件</span><br><span class="line">$ binwalk -e firmware,bin</span><br><span class="line"></span><br><span class="line"> 使用指定自定义的配置文件my_extract.conf</span><br><span class="line">$ binwalk --extract&#x3D;.&#x2F;my.extract.conf firmware.bin</span><br></pre></td></tr></table></figure><p> <strong>显示完整的扫描结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -I firmware.bin</span><br></pre></td></tr></table></figure><h2 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a><strong>foremost</strong></h2><p>最常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foremost filename</span><br></pre></td></tr></table></figure><p>命令详情：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c:\&gt; foremost [-v|-V|-h|-T|-Q|-q|-a|-w-d] [-t &lt;type&gt;] [-s &lt;blocks&gt;] [-k &lt;size&gt;]</span><br><span class="line">    [-b &lt;size&gt;] [-c &lt;file&gt;] [-o &lt;dir&gt;] [-i &lt;file]</span><br><span class="line"></span><br><span class="line">-V  - 显示版权信息并退出</span><br><span class="line">-t  - 指定文件类型.  (-t jpeg,pdf ...)</span><br><span class="line">-d  - 打开间接块检测 (针对UNIX文件系统)</span><br><span class="line">-i  - 指定输入文件 (默认为标准输入)</span><br><span class="line">-a  - 写入所有的文件头部, 不执行错误检测(损坏文件)</span><br><span class="line">-w  - 向磁盘写入审计文件，不写入任何检测到的文件</span><br><span class="line">-o  - 设置输出目录 (默认为.&#x2F;output)</span><br><span class="line">-c  - 设置配置文件 (默认为foremost.conf)</span><br><span class="line">-q  - 启用快速模式. 在512字节边界执行搜索.</span><br><span class="line">-Q  - 启用安静模式. 禁用输出消息.</span><br><span class="line">-v  - 详细模式. 向屏幕上记录所有消息。</span><br></pre></td></tr></table></figure><p>文件恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">formost -t 需要恢复文件类型后缀(如jpg) -i 扫描的分区 -o 指定存放文件的目录</span><br><span class="line">formost -q -b numbe(4096) -t 需要恢复文件类型后缀(如jpg) -i 扫描的分区 -o 指定存放文件的目录</span><br></pre></td></tr></table></figure><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a><strong>strings</strong></h2><p>语法： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings [ -a ] [ - ] [ -o ] [ -t Format ] [ -n Number ] [ -Number ] [ file ... ]</span><br></pre></td></tr></table></figure><p> 实例<br> 列出ls中所有的ASCII文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings &#x2F;bin&#x2F;ls</span><br></pre></td></tr></table></figure><p> 列出ls中所有的ASCII文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;bin&#x2F;ls strings</span><br></pre></td></tr></table></figure><p> 查找ls中包含libc的字符串，不区分大小写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings &#x2F;bin&#x2F;ls | grep -i libc</span><br></pre></td></tr></table></figure><p>要搜索至少有 12 个字符的字符串，请输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings -12 strings</span><br></pre></td></tr></table></figure><p>要搜索至少有 20 个字符的字符串，并以十六进制来显示偏移量，请输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings -t x -n 20 strings</span><br></pre></td></tr></table></figure><p>选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-a --all：扫描整个文件而不是只扫描目标文件初始化和装载段</span><br><span class="line">-f –print-file-name：在显示字符串前先显示文件名</span><br><span class="line">-n –bytes&#x3D;[number]：找到并且输出所有NUL终止符序列</span><br><span class="line">- ：设置显示的最少的字符数，默认是4个字符</span><br><span class="line">-t --radix&#x3D;&#123;o,d,x&#125; ：输出字符的位置，基于八进制，十进制或者十六进制</span><br><span class="line">-o ：类似--radix&#x3D;o</span><br><span class="line">-T --target&#x3D; ：指定二进制文件格式</span><br><span class="line">-e --encoding&#x3D;&#123;s,S,b,l,B,L&#125; ：选择字符大小和排列顺序:s &#x3D; 7-bit, S &#x3D; 8-bit, &#123;b,l&#125; &#x3D; 16-bit, &#123;B,L&#125; &#x3D; 32-bit</span><br><span class="line">@ ：读取中选项</span><br></pre></td></tr></table></figure><h2 id="exiftool"><a href="#exiftool" class="headerlink" title="exiftool"></a><strong>exiftool</strong></h2><p>查看信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ exiftool photo.jpg  #默认显示所有的信息 exiftool+图片路径&#x2F;图片名.jpg</span><br></pre></td></tr></table></figure><p>exiftool的支持文件类型和文件元信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">File Types</span><br><span class="line">----------------------+----------------------+---------------------</span><br><span class="line">3G2   r&#x2F;w   | DVB   r&#x2F;w   | JPEG  r&#x2F;w   | ODT   r     | RIFF  r</span><br><span class="line">....</span><br><span class="line">Meta Information</span><br><span class="line">----------------------+----------------------+---------------------</span><br><span class="line">EXIF           r&#x2F;w&#x2F;c  |  CIFF           r&#x2F;w  |  Ricoh RMETA    r</span><br><span class="line">GPS            r&#x2F;w&#x2F;c  |  AFCP           r&#x2F;w  |  Picture Info   r</span><br><span class="line">IPTC           r&#x2F;w&#x2F;c  |  Kodak Meta     r&#x2F;w  |  Adobe APP14    r</span><br><span class="line">XMP            r&#x2F;w&#x2F;c  |  FotoStation    r&#x2F;w  |  MPF            r</span><br><span class="line">MakerNotes     r&#x2F;w&#x2F;c  |  PhotoMechanic  r&#x2F;w  |  Stim           r</span><br><span class="line">Photoshop IRB  r&#x2F;w&#x2F;c  |  JPEG 2000      r    |  DPX            r</span><br><span class="line">ICC Profile    r&#x2F;w&#x2F;c  |  DICOM          r    |  APE            r</span><br><span class="line">MIE            r&#x2F;w&#x2F;c  |  Flash          r    |  Vorbis         r</span><br><span class="line">JFIF           r&#x2F;w&#x2F;c  |  FlashPix       r    |  SPIFF          r</span><br><span class="line">Ducky APP12    r&#x2F;w&#x2F;c  |  QuickTime      r    |  DjVu           r</span><br><span class="line">PDF            r&#x2F;w&#x2F;c  |  Matroska       r    |  M2TS           r</span><br><span class="line">PNG            r&#x2F;w&#x2F;c  |  MXF            r    |  PE&#x2F;COFF        r</span><br><span class="line">Canon VRD      r&#x2F;w&#x2F;c  |  PrintIM        r    |  AVCHD          r</span><br><span class="line">Nikon Capture  r&#x2F;w&#x2F;c  |  FLAC           r    |  ZIP            r</span><br><span class="line">GeoTIFF        r&#x2F;w&#x2F;c  |  ID3            r    |  (and more)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ntfsstreamseditor"><a href="#ntfsstreamseditor" class="headerlink" title="ntfsstreamseditor"></a><strong>ntfsstreamseditor</strong></h2><p>NtfsStreamsEditor可以实现对NTFS数据流的扫描、删除、附加、导入、导出、备份和还原等完整处理手段，是Ntfs数据流处理的强大工具。<br>NTFS数据流一旦被黑客利用，有一个很恐怖的特征，因为它在系统中是完全隐形的。在“资源管理器”中是根本不可能发现它的存在的，<br>即使是其他一些专业的文件管理软件也无法找到其蛛丝马迹。因此，NTFS数据流木马将是最具杀伤力的黑客攻击手段之一。<br>参考 ： <a href="http://www.mamicode.com/info-detail-1340194.html">http://www.mamicode.com/info-detail-1340194.html</a></p><h1 id="音频"><a href="#音频" class="headerlink" title="音频"></a><strong>音频</strong></h1><h2 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a><strong>Audacity</strong></h2><p>音频隐写中最常用的工具</p><h2 id="Kinovea"><a href="#Kinovea" class="headerlink" title="Kinovea"></a><strong>Kinovea</strong></h2><p>可以逐帧查看图片或视频的工具<br>可以藏二维码，编码，或其他密码等</p><h2 id="dtmf2num"><a href="#dtmf2num" class="headerlink" title="dtmf2num"></a><strong>dtmf2num</strong></h2><p>将电话码转成数字，<br>一般要在将数字转手机键盘密码，转成字母</p><h2 id="mp3stego"><a href="#mp3stego" class="headerlink" title="mp3stego"></a><strong>mp3stego</strong></h2><p>使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加密： encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3</span><br><span class="line">解密： decode -X -P pass svega_stego.mp3</span><br></pre></td></tr></table></figure><p>先看加密的过程：encode -E （里面放要加密的txt信息）  -P（密码） （需要将密码放入的wav文件） （生产的mp3文件）</p><p>解密过程：decode -X -P （密码） （要解密的文件）</p><h2 id="MuseScore"><a href="#MuseScore" class="headerlink" title="MuseScore"></a><strong>MuseScore</strong></h2><p>tune转五线谱</p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h1><h2 id="stegdetect"><a href="#stegdetect" class="headerlink" title="stegdetect"></a><strong>stegdetect</strong></h2><p>详情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">q – 仅显示可能包含隐藏内容的图像</span><br><span class="line"></span><br><span class="line">n – 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。</span><br><span class="line"></span><br><span class="line">s – 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</span><br><span class="line"></span><br><span class="line">d – 打印带行号的调试信息。</span><br><span class="line"></span><br><span class="line">t – 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：</span><br><span class="line"></span><br><span class="line">j – 检测图像中的信息是否是用jsteg嵌入的。</span><br><span class="line"></span><br><span class="line">o – 检测图像中的信息是否是用outguess嵌入的。</span><br><span class="line"></span><br><span class="line">p – 检测图像中的信息是否是用jphide嵌入的。</span><br><span class="line"></span><br><span class="line">i – 检测图像中的信息是否是用invisible secrets嵌入的。</span><br></pre></td></tr></table></figure><p>检测该图片用的是哪种加密方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stegdetect.exe -tjopi -s 10.0 hide.jpg</span><br></pre></td></tr></table></figure><p>stegdetect下的stegbreak字典破解，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stegbreak.exe -r rules.ini -f password.txt -r p hide.jpg</span><br></pre></td></tr></table></figure><h2 id="F5"><a href="#F5" class="headerlink" title="F5"></a><strong>F5</strong></h2><p>图片格式： jpg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解密： java Extract 图片的绝对路径&#x2F;123456.jpg -p 123456</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="outguess"><a href="#outguess" class="headerlink" title="outguess"></a><strong>outguess</strong></h2><p>图片规格： jpg<br>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加密：  outguess -k &quot;my secret key&quot; -d hidden.txt demo.jpg out.jpg</span><br><span class="line">解密：  outguess -k &quot;my secret key&quot; -r out.jpg hidden.txt</span><br></pre></td></tr></table></figure><p> 加密:demo.jpg会覆盖out.jpg, hidden.txt中的内容是要隐藏的东西<br> 解密:解密内容放在hidden.txt中</p><h2 id="steghide"><a href="#steghide" class="headerlink" title="steghide"></a><strong>steghide</strong></h2><p>图片格式： jpg  wav<br>用法： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将secret.txt文件隐藏到text.jpg中：</span><br><span class="line"># steghide embed -cf test.jpg -ef secret.txt -p 123456</span><br><span class="line"></span><br><span class="line">从text.jpg解出secret.txt:</span><br><span class="line">#steghide extract -sf test.jpg -p 123456</span><br></pre></td></tr></table></figure><p>Steghide爆破密码1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#bruteStegHide.sh </span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">for line in &#96;cat $2&#96;;do</span><br><span class="line">    steghide extract -sf $1 -p $line &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line">    if [[ $? -eq 0 ]];then</span><br><span class="line">        echo &#39;password is: &#39;$line</span><br><span class="line">        exit</span><br><span class="line">    fi  </span><br><span class="line">done </span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bruteStegHide.sh test.jpg passwd.txt </span><br></pre></td></tr></table></figure><p>Steghide爆破密码2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf8 -*-</span><br><span class="line">#author:pcat</span><br><span class="line">#http:&#x2F;&#x2F;pcat.cnblogs.com</span><br><span class="line">from subprocess import *</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    stegoFile&#x3D;&#39;rose.jpg&#39;</span><br><span class="line">    extractFile&#x3D;&#39;hide.txt&#39;</span><br><span class="line">    passFile&#x3D;&#39;english.dic&#39;</span><br><span class="line"></span><br><span class="line">    errors&#x3D;[&#39;could not extract&#39;,&#39;steghide --help&#39;,&#39;Syntax error&#39;]</span><br><span class="line">    cmdFormat&#x3D;&#39;steghide extract -sf &quot;%s&quot; -xf &quot;%s&quot; -p &quot;%s&quot;&#39;</span><br><span class="line">    f&#x3D;open(passFile,&#39;r&#39;)</span><br><span class="line"></span><br><span class="line">    for line in f.readlines():</span><br><span class="line">        cmd&#x3D;cmdFormat %(stegoFile,extractFile,line.strip())</span><br><span class="line">        p&#x3D;Popen(cmd,shell&#x3D;True,stdout&#x3D;PIPE,stderr&#x3D;STDOUT)</span><br><span class="line">        content&#x3D;unicode(p.stdout.read(),&#39;gbk&#39;)</span><br><span class="line">        for err in errors:</span><br><span class="line">            if err in content:</span><br><span class="line">                break</span><br><span class="line">        else:</span><br><span class="line">            print content,</span><br><span class="line">            print &#39;the passphrase is %s&#39; %(line.strip())</span><br><span class="line">            f.close()</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    foo()</span><br><span class="line">    print &#39;ok&#39;</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h2 id="jphide"><a href="#jphide" class="headerlink" title="jphide"></a><strong>jphide</strong></h2><p>图片格式： jpg<br>需要密码</p><h2 id="zsteg"><a href="#zsteg" class="headerlink" title="zsteg"></a><strong>zsteg</strong></h2><p>1.查看lsb数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zsteg xxx.bmp</span><br><span class="line">zsteg xxx.png</span><br><span class="line">zsteg -a (文件名)    #查看各个通道的lsb</span><br></pre></td></tr></table></figure><p>2.检测zlib</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#-b的位数是从1开始的</span><br><span class="line">zsteg zlib.bmp -b 1 -o xy -v</span><br></pre></td></tr></table></figure><p>3.提取该通道图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg -e b8,a,lsb,xy 文件.png -&gt; out.png</span><br></pre></td></tr></table></figure><h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a><strong>LSB</strong></h2><p>LSB隐写(只有文件类型为PNG和BMP的无损压缩文件才可以用LSB隐写)</p><p>需要用到stegsolve工具和jave的运行环境。</p><p>而LSB隐写就是修改RGB颜色分量的最低二进制位也就是最低有效位（LSB），而人类的眼睛不会注意到这前后的变化，（人类的眼睛只能识别一部分颜色的变化）</p><p>分析是否有可能是LSB隐写，我们开始点击下面的按钮，切换到不同通道，我们逐渐对比不同通道我们所看到的图片是怎么样子的。<br><img src="/2020/11/01/misc%E4%B9%8B%E9%9A%90%E5%86%99/1.png"><br><img src="/2020/11/01/misc%E4%B9%8B%E9%9A%90%E5%86%99/2.png"><br>我们发现在Red plane0和Greee plane 0以及B略 plane 0出现了相同的异常情况，我们这里基本可以断定就是LSB隐写了<br>这里有两种方法</p><ol><li>利用Stegsolve的Data Extract功能提取出最小位的RGB</li><li>利用python脚本来提取最小位的RGB<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">im &#x3D; Image.open(&quot;extracted.bmp&quot;)</span><br><span class="line">pix &#x3D; im.load()</span><br><span class="line">width, height &#x3D; im.size</span><br><span class="line"></span><br><span class="line">extracted_bits &#x3D; []</span><br><span class="line">for y in range(height):</span><br><span class="line">    for x in range(width):</span><br><span class="line">        r, g, b &#x3D; pix[(x,y)]</span><br><span class="line">        extracted_bits.append(r &amp; 1)</span><br><span class="line">        extracted_bits.append(g &amp; 1)</span><br><span class="line">        extracted_bits.append(b &amp; 1)</span><br><span class="line"></span><br><span class="line">extracted_byte_bits &#x3D; [extracted_bits[i:i+8] for i in range(0, len(extracted_bits), 8)]</span><br><span class="line">with open(&quot;extracted2.bmp&quot;, &quot;wb&quot;) as out:</span><br><span class="line">    for byte_bits in extracted_byte_bits:</span><br><span class="line">        byte_str &#x3D; &#39;&#39;.join(str(x) for x in byte_bits)</span><br><span class="line">        byte &#x3D; chr(int(byte_str, 2))</span><br><span class="line">        out.write(byte)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a><strong>Stegsolve</strong></h2><p>常用图片隐写lsb工具</p><h2 id="wbStego4open"><a href="#wbStego4open" class="headerlink" title="wbStego4open"></a><strong>wbStego4open</strong></h2><p>可以需要密码</p><h2 id="pngcheck"><a href="#pngcheck" class="headerlink" title="pngcheck"></a><strong>pngcheck</strong></h2><p>pngcheck可以验证PNG图片的完整性（通过检查内部CRC-32校验和&bra;比特&ket;)和解压缩图像数据；<br>它能够转储几乎所有任选的块级别信息在该图像中的可读数据。<br>我们使用pngcheck -v hidden.png 如此的命令对图片进行检测 使用pngcheck对图片进行检测</p><h2 id="identify"><a href="#identify" class="headerlink" title="identify"></a><strong>identify</strong></h2><p>identify命令主要用于获取一个或多个图像文件的格式和特性。<br>基本的命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">identify [options] input-file</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">identify:命令名称</span><br><span class="line">options:参数</span><br><span class="line">input-file:文件名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 download]# identify vim.jpg </span><br><span class="line">vim.jpg JPEG 1306x1909 1306x1909+0+0 8-bit DirectClass 454KB 0.000u 0:00.000</span><br><span class="line"> </span><br><span class="line">[root@server1 download]# identify -verbose vim.jpg </span><br><span class="line">Image: vim.jpg</span><br><span class="line">  Format: JPEG (Joint Photographic Experts Group JFIF format)</span><br><span class="line">  Class: DirectClass</span><br><span class="line">  Geometry: 1306x1909+0+0</span><br><span class="line">  Resolution: 72x72</span><br><span class="line">  Print size: 18.1389x26.5139</span><br><span class="line">  Units: PixelsPerInch</span><br><span class="line">  Type: TrueColor</span><br><span class="line">  Endianess: Undefined</span><br><span class="line">  Colorspace: sRGB</span><br><span class="line">  Depth: 8-bit</span><br><span class="line"> </span><br><span class="line">#-verbose是显示图片文件的详细内容，更多的参数，可以通过man identify来获取。</span><br></pre></td></tr></table></figure><h2 id="free-file-camouflage"><a href="#free-file-camouflage" class="headerlink" title="free_file_camouflage"></a><strong>free_file_camouflage</strong></h2><p>可以需要密码</p><h2 id="oursecret"><a href="#oursecret" class="headerlink" title="oursecret"></a><strong>oursecret</strong></h2><p>需要密码</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>misc总结</title>
      <link href="2020/10/31/misc%E6%80%BB%E7%BB%93/"/>
      <url>2020/10/31/misc%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="套路总结"><a href="#套路总结" class="headerlink" title="套路总结"></a><strong>套路总结</strong></h1><blockquote><p><strong>图片隐写</strong>,<strong>音频隐写</strong>,<strong>压缩包破解</strong>,<strong>补齐文件头尾</strong>,<strong>各种编码</strong>,</p></blockquote><h1 id="工具总结"><a href="#工具总结" class="headerlink" title="工具总结"></a><strong>工具总结</strong></h1><blockquote><p><strong>foremost</strong>, <strong>binwalk</strong>, <strong>steghide</strong>, <strong>strings</strong>, <strong>steghide</strong>, <strong>outguess</strong>, <strong>tree</strong>, <strong>F5</strong>,</p></blockquote><blockquote><p><strong>ziperello</strong>, <strong>stegsolve</strong>, <strong>winhex</strong>, <strong>ARCHPR</strong>, <strong>wireshark</strong>, <strong>audacity</strong>, <strong>jd-gui</strong>, <strong>museScore</strong>, <strong>sileneye</strong>, </p></blockquote><h1 id="信息隐藏方法"><a href="#信息隐藏方法" class="headerlink" title="信息隐藏方法"></a><strong>信息隐藏方法</strong></h1><blockquote><p>   <strong>十六进制中</strong>, <strong>图片隐写</strong>, <strong>strings</strong>, </p></blockquote><h1 id="文件头文件尾总结"><a href="#文件头文件尾总结" class="headerlink" title="文件头文件尾总结"></a><strong>文件头文件尾总结</strong></h1><table><thead><tr><th>文件</th><th align="center">文件头</th><th align="right">文件尾</th></tr></thead><tbody><tr><td>JPEG (jpg)</td><td align="center">文件头：FFD8FF</td><td align="right">文件尾：FF D9</td></tr><tr><td>PNG (png)</td><td align="center">文件头：89504E47</td><td align="right">文件尾：AE 42 60 82</td></tr><tr><td>GIF (gif)</td><td align="center">文件头：47494638</td><td align="right">文件尾：00 3B</td></tr><tr><td>ZIP Archive (zip)</td><td align="center">文件头：504B0304</td><td align="right">文件尾：50 4B</td></tr><tr><td>TIFF (tif)</td><td align="center">文件头：49492A00</td><td align="right">文件尾：</td></tr><tr><td>Windows Bitmap (bmp)</td><td align="center">文件头：424D</td><td align="right">文件尾：</td></tr><tr><td>CAD (dwg)</td><td align="center">文件头：41433130</td><td align="right">文件尾：</td></tr><tr><td>Adobe Photoshop (psd)</td><td align="center">文件头：38425053</td><td align="right">文件尾：</td></tr><tr><td>Rich Text Format (rtf)</td><td align="center">文件头：7B5C727466</td><td align="right">文件尾：</td></tr><tr><td>XML (xml)</td><td align="center">文件头：3C3F786D6C</td><td align="right">文件尾：</td></tr><tr><td>HTML (html)</td><td align="center">文件头：68746D6C3E</td><td align="right">文件尾：</td></tr><tr><td>Email [thorough only] (eml)</td><td align="center">文件头：44656C69766572792D646174653A</td><td align="right">文件尾：</td></tr><tr><td>Outlook Express (dbx)</td><td align="center">文件头：CFAD12FEC5FD746F</td><td align="right">文件尾：</td></tr><tr><td>Outlook (pst)</td><td align="center">文件头：2142444E</td><td align="right">文件尾：</td></tr><tr><td>MS Word/Excel (xls.or.doc)</td><td align="center">文件头：D0CF11E0</td><td align="right">文件尾：</td></tr><tr><td>MS Access (mdb)</td><td align="center">文件头：5374616E64617264204A</td><td align="right">文件尾：</td></tr><tr><td>WordPerfect (wpd)</td><td align="center">文件头：FF575043</td><td align="right">文件尾：</td></tr><tr><td>Adobe Acrobat (pdf)</td><td align="center">文件头：255044462D312E</td><td align="right">文件尾：</td></tr><tr><td>Quicken (qdf)</td><td align="center">文件头：AC9EBD8F</td><td align="right">文件尾：</td></tr><tr><td>Windows Password (pwl)</td><td align="center">文件头：E3828596</td><td align="right">文件尾：</td></tr><tr><td>RAR Archive (rar)</td><td align="center">文件头：52617221</td><td align="right">文件尾：</td></tr><tr><td>Wave (wav)</td><td align="center">文件头：57415645</td><td align="right">文件尾：</td></tr><tr><td>AVI (avi)</td><td align="center">文件头：41564920</td><td align="right">文件尾：</td></tr><tr><td>Real Audio (ram)</td><td align="center">文件头：2E7261FD</td><td align="right">文件尾：</td></tr><tr><td>Real Media (rm)</td><td align="center">文件头：2E524D46</td><td align="right">文件尾：</td></tr><tr><td>MPEG (mpg)</td><td align="center">文件头：000001BA</td><td align="right">文件尾：</td></tr><tr><td>MPEG (mpg)</td><td align="center">文件头：000001B3</td><td align="right">文件尾：</td></tr><tr><td>Quicktime (mov)</td><td align="center">文件头：6D6F6F76</td><td align="right">文件尾：</td></tr><tr><td>Windows Media (asf)</td><td align="center">文件头：3026B2758E66CF11</td><td align="right">文件尾：</td></tr><tr><td>MIDI (mid)</td><td align="center">文件头：4D546864</td><td align="right">文件尾：</td></tr></tbody></table><h1 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a><strong>图片隐写</strong></h1><blockquote><p>工具; <strong>winhex</strong>, <strong>stegsolve</strong>, <strong>foremost</strong>, <strong>binwalk</strong>, <strong>steghide</strong>, <strong>ps</strong>, <strong>zsteg</strong>, <strong>F5</strong>,<br>套路; <strong>藏于16进制</strong>, <strong>属性</strong>, <strong>修改大小</strong>, <strong>隐藏文件</strong>, <strong>动态藏于某帧</strong>, <strong>LSB隐写</strong>, </p></blockquote><h2 id="属性藏信息"><a href="#属性藏信息" class="headerlink" title="属性藏信息"></a>属性藏信息</h2><p>一般属性得到编码去解<br><img src="/2020/10/31/misc%E6%80%BB%E7%BB%93/010102.png" alt="图片"></p><h2 id="zsteg的使用方法"><a href="#zsteg的使用方法" class="headerlink" title="zsteg的使用方法"></a><strong>zsteg的使用方法</strong></h2><p>查看帮助</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg -h</span><br></pre></td></tr></table></figure><p>查看LSB信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsteg pcat.png</span><br></pre></td></tr></table></figure><p>检测zlib</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -b的位数是从1开始的</span><br><span class="line">zsteg zlib.bmp -b 1 -o xy -v</span><br></pre></td></tr></table></figure><h2 id="stegsolve"><a href="#stegsolve" class="headerlink" title="stegsolve"></a><strong>stegsolve</strong></h2><p>File Format: 文件格式，这个主要是查看图片的具体信息</p><p>Data Extract: 数据抽取，图片中隐藏数据的抽取</p><p>Frame Browser: 帧浏览器，主要是对GIF之类的动图进行分解，动图变成一张张图片，便于查看</p><p>Image Combiner: 拼图，图片拼接<br>LSB隐写（也可能将文件用LSB隐藏）<br><img src="/2020/10/31/misc%E6%80%BB%E7%BB%93/010101.png" alt="图片"></p><h2 id="steghide"><a href="#steghide" class="headerlink" title="steghide"></a><strong>steghide</strong></h2><p> <strong>加密</strong>  </p><p>将flag.txt文件隐藏到ctf.jpg中<br>steghide embed -cf out.jpg -ef flag.txt [-p 123456] </p><blockquote><p>-p 接密码，可无<br> <strong>解密</strong><br>查看文件中嵌入的信息</p></blockquote><p>steghide info out.jpg<br>提取含有密码的隐藏内容   </p><p>steghide extract -sf out.jpg -p 123456<br>提取不含有密码的隐藏内容<br>steghide extract -sf out.jpg</p><h2 id="Binwalk"><a href="#Binwalk" class="headerlink" title="Binwalk"></a><strong>Binwalk</strong></h2><p> <strong>获取帮助</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -h</span><br><span class="line">$ binwalk -help</span><br></pre></td></tr></table></figure><p> <strong>固件扫描</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk firmware.bin </span><br></pre></td></tr></table></figure><p> <strong>提取文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 使用默认的预定义配置文件</span><br><span class="line">$ binwalk -e firmware,bin</span><br><span class="line"></span><br><span class="line"> 使用指定自定义的配置文件my_extract.conf</span><br><span class="line">$ binwalk --extract&#x3D;.&#x2F;my.extract.conf firmware.bin</span><br></pre></td></tr></table></figure><p> <strong>过滤选项</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -y filesystem firmware,bin </span><br><span class="line">$ binwalk -x &#96;mach-o&#96; -x &#96;^hp&#96; firmware.bin </span><br></pre></td></tr></table></figure><p> <strong>显示完整的扫描结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -I firmware.bin</span><br></pre></td></tr></table></figure><p> <strong>文件比较</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -w firmware.bin firmware2.bin firmware3.bin</span><br><span class="line">$ binwalk -w --block&#x3D;8 --length&#x3D;64 firmware.bin firmware2,bin</span><br></pre></td></tr></table></figure><p> <strong>日志记录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -f binwalk.log -q firmware.bin</span><br><span class="line">$ binwalk -f binwalk.log --csv firmware.bin</span><br></pre></td></tr></table></figure><p> <strong>指令系统分析</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -A firmware.bin</span><br></pre></td></tr></table></figure><p> <strong>熵分析</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -E firmware.bin</span><br></pre></td></tr></table></figure><p> <strong>启动式分析</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -E firmware.bin</span><br></pre></td></tr></table></figure><h2 id="outguess"><a href="#outguess" class="headerlink" title="outguess"></a><strong>outguess</strong></h2><p> <strong>加密：</strong></p><p> outguess -k “my secret key” -d hidden.txt demo.jpg out.jpg</p><p> 加密之后，demo.jpg会覆盖out.jpg, </p><p> hidden.txt中的内容是要隐藏的东西</p><p> <strong>解密：</strong></p><p> outguess -k “my secret key” -r out.jpg hidden.txt</p><p> 解密之后，解密内容放在hidden.txt中</p><h1 id="简单编码"><a href="#简单编码" class="headerlink" title="简单编码"></a><strong>简单编码</strong></h1><h1 id="emoji总结"><a href="#emoji总结" class="headerlink" title="emoji总结"></a><strong>emoji总结</strong></h1><h1 id="音频隐写总结"><a href="#音频隐写总结" class="headerlink" title="音频隐写总结"></a><strong>音频隐写总结</strong></h1><h1 id="压缩包加密"><a href="#压缩包加密" class="headerlink" title="压缩包加密"></a><strong>压缩包加密</strong></h1><blockquote><p>工具; <strong>winhex</strong>, <strong>ziperello</strong>, <strong>ARCHPR</strong>,<br>套路; <strong>暴力破解</strong>, <strong>CRC碰撞</strong>, <strong>密码藏于别处</strong>, <strong>伪加密</strong>, <strong>补齐文件</strong>, <strong>明文攻击</strong>，</p></blockquote><h1 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a><strong>流量分析</strong></h1><blockquote><p>工具; <strong>wireshark</strong>,<br>方法; <strong>追踪流</strong>, <strong>搜线索</strong>, </p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
